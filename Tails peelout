-- Spoofed Dash Script - Simulates WalkSpeed 100
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local anim1 = Instance.new("Animation")
anim1.AnimationId = "rbxassetid://105660804989893"
local anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://123691762461584"

local animTrack1, animTrack2, runAnimTrack
local holding = false
local running = false
local cooldown = false
local cooldownGui, cooldownLabel
local currentDir = Vector3.new(0, 0, -1)

local function makeGui()
    cooldownGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    cooldownGui.Name = "DashCooldownGui"
    cooldownLabel = Instance.new("TextLabel", cooldownGui)
    cooldownLabel.Size = UDim2.new(0, 60, 0, 20)
    cooldownLabel.Position = UDim2.new(1, -70, 0.5, -110)
    cooldownLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    cooldownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    cooldownLabel.Font = Enum.Font.Code
    cooldownLabel.TextSize = 14
    cooldownLabel.Text = "Ready"
end

local function startCooldown(duration)
    cooldown = true
    local start = tick()
    coroutine.wrap(function()
        while tick() - start < duration do
            cooldownLabel.Text = string.format("%.1f", duration - (tick() - start))
            RunService.Heartbeat:Wait()
        end
        cooldown = false
        cooldownLabel.Text = "Ready"
    end)()
end

local fourXTimeAccumulated = 0
local simulatedWalkSpeed = 100 -- simulate as if WalkSpeed were 100
local runTime = 5
local decayStart = 3.5
local decayDuration = runTime - decayStart

UIS.InputBegan:Connect(function(input, gpe)
    if gpe or input.KeyCode ~= Enum.KeyCode.T or holding or cooldown then return end
    holding = true
    humanoid.AutoRotate = false
    humanoid.WalkSpeed = 0
    fourXTimeAccumulated = 0

    if not cooldownGui then
        makeGui()
    end

    animTrack1 = humanoid:LoadAnimation(anim1)
    animTrack1:Play()
    animTrack1:AdjustSpeed(1)

    local holdStart = tick()
    local tickConnection
    tickConnection = RunService.RenderStepped:Connect(function()
        local t = tick() - holdStart
        if not holding then tickConnection:Disconnect() return end

        if t <= 2.5 then
            animTrack1:AdjustSpeed(1 + t / 2.5)
        elseif not animTrack2 then
            animTrack1:Stop()
            animTrack1 = nil
            animTrack2 = humanoid:LoadAnimation(anim2)
            animTrack2:Play()
        elseif t > 2.5 and t <= 4 then
            animTrack2:AdjustSpeed(1 + (t - 2.5) / 1.5)
        elseif t > 3.5 then
            animTrack2:AdjustSpeed(4)
            fourXTimeAccumulated = t - 3.5
        end
    end)
end)

UIS.InputEnded:Connect(function(input)
    if input.KeyCode ~= Enum.KeyCode.T or not holding then return end
    holding = false

    if animTrack1 then animTrack1:Stop() end
    if animTrack2 then animTrack2:Stop() end

    local allowDash = fourXTimeAccumulated >= 1
    if not allowDash then
        startCooldown(10)
        humanoid.WalkSpeed = 16
        humanoid.AutoRotate = true
        return
    end

    startCooldown(25)
    humanoid.AutoRotate = false

    runAnimTrack = humanoid:LoadAnimation(anim2)
    runAnimTrack:Play()
    runAnimTrack:AdjustSpeed(4)

    local dashStart = tick()
    RunService:BindToRenderStep("SpoofDash", Enum.RenderPriority.Character.Value + 1, function()
        local elapsed = tick() - dashStart
        if elapsed > runTime then
            RunService:UnbindFromRenderStep("SpoofDash")
            humanoid.AutoRotate = true
            if runAnimTrack then runAnimTrack:Stop() end
            humanoid.WalkSpeed = 16
            return
        end

        -- animation speed decay
        if elapsed > decayStart then
            local pct = (elapsed - decayStart) / decayDuration
            runAnimTrack:AdjustSpeed(math.clamp(4 - (3 * pct), 1, 4))
        end

        -- movement direction from input + camera
        local camCF = Camera.CFrame
        local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
        local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit

        local moveVec = Vector3.zero
        if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += forward end
        if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec -= right end
        if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += right end
        moveVec = moveVec.Magnitude > 0 and moveVec.Unit or forward

        currentDir = currentDir:Lerp(moveVec, 0.05)

        -- realistic spoofed movement at simulated speed
        humanoid:Move(currentDir * simulatedWalkSpeed / 60, false) -- approx 60 FPS

        -- rotate
        hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + currentDir)
    end)
end)

-- reset on respawn
player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
    holding = false
    running = false
end)
