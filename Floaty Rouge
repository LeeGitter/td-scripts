local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")
local animator = humanoid:WaitForChild("Animator")

-- Constant WalkSpeed
humanoid.WalkSpeed = 34

local alive = true
local jumpPhase = nil
local jumpStartTime = 0
local jumpStartY = 0
local lastGroundY = hrp.Position.Y
local fallPhase = false
local fallStartY = 0
local fallStartTime = 0
local fallDuration = 0.5

-- Load and lock animations
local primaryAnim = Instance.new("Animation")
primaryAnim.AnimationId = "rbxassetid://75355013469339"
local primaryTrack = animator:LoadAnimation(primaryAnim)
primaryTrack.Priority = Enum.AnimationPriority.Action
primaryTrack.Looped = true
primaryTrack:Play()
primaryTrack:AdjustSpeed(1)

local blendAnim = Instance.new("Animation")
blendAnim.AnimationId = "rbxassetid://92832499482627"
local blendTrack = animator:LoadAnimation(blendAnim)
blendTrack.Priority = Enum.AnimationPriority.Idle
blendTrack.Looped = true

-- Create BodyPosition for hover
local bodyPosition = Instance.new("BodyPosition")
bodyPosition.Name = "MythicOscillator"
bodyPosition.MaxForce = Vector3.new(0, math.huge, 0)
bodyPosition.P = 2000
bodyPosition.D = 100
bodyPosition.Position = hrp.Position
bodyPosition.Parent = hrp

-- Oscillation parameters
local minOffset = 3
local maxOffset = 4
local oscillationPeriod = 2

-- Jump parameters
local jumpHeight = 20
local ascendDuration = 6
local apexHold = 0.5
local descendDuration = 1

-- Ground detection
local rayParams = RaycastParams.new()
rayParams.FilterDescendantsInstances = {character}
rayParams.FilterType = Enum.RaycastFilterType.Blacklist

-- Input: spacebar triggers jump
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or input.KeyCode ~= Enum.KeyCode.Space then return end
    if jumpPhase then return end
    jumpPhase = "ascend"
    jumpStartTime = tick()
    jumpStartY = hrp.Position.Y
    blendTrack:Stop()
    primaryTrack:AdjustSpeed(2)
end)

-- Death cleanup
humanoid.Died:Connect(function()
    alive = false
    bodyPosition:Destroy()
end)

-- Suppress rogue animations
local function suppressAnimations()
    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
        if track.Animation.AnimationId ~= "rbxassetid://75355013469339" and
           track.Animation.AnimationId ~= "rbxassetid://92832499482627" then
            track:Stop(0)
        end
    end
end

-- Main loop
RunService.RenderStepped:Connect(function()
    if not alive then return end

    suppressAnimations()
    if not primaryTrack.IsPlaying then primaryTrack:Play() end

    local time = tick()
    local sinWave = math.sin((2 * math.pi / oscillationPeriod) * time)
    local offset = minOffset + ((sinWave + 1) / 2) * (maxOffset - minOffset)

    -- Raycast to ground
    local rayOrigin = hrp.Position
    local rayDir = Vector3.new(0, -100, 0)
    local rayResult = Workspace:Raycast(rayOrigin, rayDir, rayParams)

    if rayResult then
        local groundY = rayResult.Position.Y
        local baseY = groundY + offset

        -- Detect fall off ledge
        if not jumpPhase and not fallPhase then
            if groundY < lastGroundY - 3 then
                fallPhase = true
                fallStartY = hrp.Position.Y
                fallStartTime = time
            end
        end
        lastGroundY = groundY

        -- Handle jump phases
        if jumpPhase then
            local elapsed = time - jumpStartTime

            if jumpPhase == "ascend" then
                if elapsed < ascendDuration then
                    local progress = elapsed / ascendDuration
                    local targetY = jumpStartY + (jumpHeight * progress)
                    bodyPosition.Position = Vector3.new(hrp.Position.X, targetY, hrp.Position.Z)
                else
                    jumpPhase = "hold"
                    jumpStartTime = time
                    bodyPosition.Position = Vector3.new(hrp.Position.X, jumpStartY + jumpHeight, hrp.Position.Z)
                end

            elseif jumpPhase == "hold" then
                if elapsed < apexHold then
                    bodyPosition.Position = Vector3.new(hrp.Position.X, jumpStartY + jumpHeight, hrp.Position.Z)
                else
                    jumpPhase = "descend"
                    jumpStartTime = time
                end

            elseif jumpPhase == "descend" then
                if elapsed < descendDuration then
                    local progress = elapsed / descendDuration
                    local targetY = jumpStartY + jumpHeight * (1 - progress)
                    bodyPosition.Position = Vector3.new(hrp.Position.X, targetY, hrp.Position.Z)
                else
                    jumpPhase = nil
                    primaryTrack:AdjustSpeed(1)
                end
            end

        elseif fallPhase then
            local elapsed = time - fallStartTime
            if elapsed < fallDuration then
                local progress = elapsed / fallDuration
                local targetY = fallStartY + (baseY - fallStartY) * progress
                bodyPosition.Position = Vector3.new(hrp.Position.X, targetY, hrp.Position.Z)
            else
                fallPhase = false
            end

        else
            bodyPosition.Position = Vector3.new(hrp.Position.X, baseY, hrp.Position.Z)
        end
    end

    -- Blend animation logic
    local velocity = hrp.Velocity
    local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude
    if not jumpPhase then
        if horizontalSpeed > 1 then
            if not blendTrack.IsPlaying then blendTrack:Play() end
        else
            if blendTrack.IsPlaying then blendTrack:Stop() end
        end
    end
end)
