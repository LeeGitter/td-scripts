local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")
local animator = humanoid:WaitForChild("Animator")

local alive = true
local isJumping = false

-- Load and lock animations
local primaryAnim = Instance.new("Animation")
primaryAnim.AnimationId = "rbxassetid://75355013469339"
local primaryTrack = animator:LoadAnimation(primaryAnim)
primaryTrack.Priority = Enum.AnimationPriority.Action
primaryTrack:Play()
primaryTrack:AdjustSpeed(1)

local blendAnim = Instance.new("Animation")
blendAnim.AnimationId = "rbxassetid://92832499482627"
local blendTrack = animator:LoadAnimation(blendAnim)
blendTrack.Priority = Enum.AnimationPriority.Idle

-- Create BodyPosition for hover
local bodyPosition = Instance.new("BodyPosition")
bodyPosition.Name = "MythicOscillator"
bodyPosition.MaxForce = Vector3.new(0, math.huge, 0)
bodyPosition.P = 2000
bodyPosition.D = 100
bodyPosition.Position = hrp.Position
bodyPosition.Parent = hrp

-- Oscillation parameters
local minOffset = 3
local maxOffset = 4
local oscillationPeriod = 2

-- Jump parameters
local jumpDuration = 4
local jumpVelocity = 5
local jumpStartTime = 0

-- Ground detection
local rayParams = RaycastParams.new()
rayParams.FilterDescendantsInstances = {character}
rayParams.FilterType = Enum.RaycastFilterType.Blacklist

-- Input: spacebar triggers jump
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or input.KeyCode ~= Enum.KeyCode.Space then return end
    if isJumping then return end
    isJumping = true
    jumpStartTime = tick()
    blendTrack:Stop()
    primaryTrack:AdjustSpeed(1.5)
end)

-- Death cleanup
humanoid.Died:Connect(function()
    alive = false
    bodyPosition:Destroy()
end)

-- Main loop
RunService.RenderStepped:Connect(function()
    if not alive then return end

    -- Kill all other animations
    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
        if track ~= primaryTrack and track ~= blendTrack then
            track:Stop()
        end
    end

    local time = tick()
    local sinWave = math.sin((2 * math.pi / oscillationPeriod) * time)
    local oscillation = minOffset + ((sinWave + 1) / 2) * (maxOffset - minOffset)

    -- Raycast to ground
    local rayOrigin = hrp.Position
    local rayDir = Vector3.new(0, -100, 0)
    local rayResult = Workspace:Raycast(rayOrigin, rayDir, rayParams)

    if rayResult then
        local groundY = rayResult.Position.Y
        local targetY = groundY + oscillation
        bodyPosition.Position = Vector3.new(hrp.Position.X, targetY, hrp.Position.Z)
    end

    -- Floaty descent
    local velocity = hrp.Velocity
    if velocity.Y < -2 and not isJumping then
        hrp.Velocity = Vector3.new(velocity.X, velocity.Y * 0.3, velocity.Z)
    end

    -- Jump override
    if isJumping then
        local elapsed = time - jumpStartTime
        if elapsed < jumpDuration then
            hrp.Velocity = Vector3.new(velocity.X, jumpVelocity, velocity.Z)
        else
            isJumping = false
            primaryTrack:AdjustSpeed(1)
        end
    end

    -- Blend animation logic
    local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude
    if not isJumping then
        if horizontalSpeed > 1 then
            if not blendTrack.IsPlaying then blendTrack:Play() end
        else
            if blendTrack.IsPlaying then blendTrack:Stop() end
        end
    end
end)
