local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local active = true

local function setupCharacter(character)
    if not active then return end

    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local animator = humanoid:WaitForChild("Animator")

    -- Load animations
    local primaryAnim = Instance.new("Animation")
    primaryAnim.AnimationId = "rbxassetid://75355013469339"
    local primaryTrack = animator:LoadAnimation(primaryAnim)
    primaryTrack.Priority = Enum.AnimationPriority.Action
    primaryTrack:Play()
    primaryTrack:AdjustSpeed(1)

    local blendAnim = Instance.new("Animation")
    blendAnim.AnimationId = "rbxassetid://92832499482627"
    local blendTrack = animator:LoadAnimation(blendAnim)
    blendTrack.Priority = Enum.AnimationPriority.Idle

    -- Hover + oscillation parameters
    local hoverOffset = 2.5
    local oscillationAmplitude = 2.5 -- stronger symbolic breath
    local oscillationSpeed = 2

    -- Idle tilt parameters
    local idleTiltAmplitude = 2
    local idleTiltSpeed = 1.5

    -- Jump control
    local isJumping = false

    -- Directional tilt while moving
    local function updateTilt()
        local velocity = rootPart.Velocity
        local horizontal = Vector3.new(velocity.X, 0, velocity.Z)
        if horizontal.Magnitude > 1 then
            local tiltAngle = math.clamp(horizontal.Magnitude / 20, 0, 1) * 15
            local direction = horizontal.Unit
            local tiltCFrame = CFrame.Angles(0, 0, -direction.X * tiltAngle * math.pi / 180)
            rootPart.CFrame = rootPart.CFrame:Lerp(rootPart.CFrame * tiltCFrame, 0.1)
        end
    end

    -- Jump logic with velocity-based ascent
    local function handleJump()
        if isJumping then return end
        isJumping = true
        blendTrack:Stop()
        primaryTrack:AdjustSpeed(1.5)

        local ascentDuration = 4
        local ascentHeight = 20
        local ascentStart = tick()
        local ascentVelocity = ascentHeight / ascentDuration

        local connection
        connection = RunService.RenderStepped:Connect(function()
            if not active then connection:Disconnect() return end

            local elapsed = tick() - ascentStart
            if elapsed < ascentDuration then
                rootPart.Velocity = Vector3.new(0, ascentVelocity, 0)
            else
                connection:Disconnect()
                isJumping = false
                primaryTrack:AdjustSpeed(1)
            end
        end)
    end

    -- Oscillation + movement loop
    local loopConnection
    loopConnection = RunService.RenderStepped:Connect(function()
        if not active then loopConnection:Disconnect() return end

        local time = tick()
        local oscillation = math.sin(time * oscillationSpeed) * oscillationAmplitude
        local targetY = rootPart.Position.Y + hoverOffset + oscillation

        local velocity = rootPart.Velocity
        local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude
        local pitchAngle = math.sin(time * idleTiltSpeed) * (idleTiltAmplitude * math.pi / 180)
        local pitchCFrame = CFrame.Angles(pitchAngle, 0, 0)

        local currentPos = rootPart.Position
        local newPos = Vector3.new(currentPos.X, targetY, currentPos.Z)
        local lookDir = rootPart.CFrame.LookVector
        local baseCFrame = CFrame.new(newPos, newPos + lookDir)

        if horizontalSpeed < 1 and not isJumping then
            rootPart.CFrame = baseCFrame * pitchCFrame
        else
            rootPart.CFrame = baseCFrame
        end

        -- Floaty descent override
        if velocity.Y < -2 and not isJumping then
            rootPart.Velocity = Vector3.new(velocity.X, velocity.Y * 0.3, velocity.Z)
        end

        updateTilt()

        if not isJumping then
            if horizontalSpeed > 1 then
                if not blendTrack.IsPlaying then blendTrack:Play() end
            else
                if blendTrack.IsPlaying then blendTrack:Stop() end
            end
        end
    end)

    -- Jump trigger
    humanoid.StateChanged:Connect(function(_, state)
        if state == Enum.HumanoidStateType.Jumping then
            handleJump()
        end
    end)
end

-- Initial setup
if player.Character then
    setupCharacter(player.Character)
end

-- Disable on respawn
player.CharacterAdded:Connect(function()
    active = false
end)
