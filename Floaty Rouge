local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- === CONSTANT FALL ANIMATION ===
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://104113642912910"
local animTrack = humanoid:LoadAnimation(anim)
animTrack.Looped = true
animTrack:Play()
animTrack.Priority = Enum.AnimationPriority.Idle
animTrack:AdjustSpeed(1)

-- === DISABLE DEFAULT WALKING ANIMATIONS ===
for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
	if track ~= animTrack then
		track:Stop()
	end
end

-- Stop new walk/run animations from playing
humanoid.AnimationPlayed:Connect(function(track)
	if track.Animation.AnimationId ~= anim.AnimationId then
		track:Stop()
	end
end)

-- === SETTINGS ===
local floatMin = 6
local floatMax = 7.5
local ascendHeight = 11
local ascendDuration = 1.5

-- === STATES ===
local bounceTimer = 0
local isAscending = false
local ascendStartTime = 0
local moveVector = Vector3.zero
local alive = true

-- === CLEANUP ON DEATH ===
humanoid.Died:Connect(function()
	alive = false
end)

-- === FORCE FALLING STATE TO TRIGGER FALL ANIMATION ===
RunService.Stepped:Connect(function()
	if alive then
		humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
	end
end)

-- === MOVEMENT INPUT TRACKING FOR TILT ===
UIS.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W then moveVector = Vector3.new(0, 0, -1) end
		if input.KeyCode == Enum.KeyCode.S then moveVector = Vector3.new(0, 0, 1) end
		if input.KeyCode == Enum.KeyCode.A then moveVector = Vector3.new(-1, 0, 0) end
		if input.KeyCode == Enum.KeyCode.D then moveVector = Vector3.new(1, 0, 0) end
	end
end)

UIS.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.S or input.KeyCode == Enum.KeyCode.A or input.KeyCode == Enum.KeyCode.D then
			moveVector = Vector3.zero
		end
	end
end)

-- === ASCEND ON SPACE ===
UIS.InputBegan:Connect(function(input, gpe)
	if gpe or input.KeyCode ~= Enum.KeyCode.Space or isAscending then return end
	isAscending = true
	ascendStartTime = tick()

	animTrack:AdjustSpeed(3)
	animTrack.Priority = Enum.AnimationPriority.Action4
end)

-- === FLOAT LOOP ===
RunService.RenderStepped:Connect(function(dt)
	if not alive or not character or not character.Parent then return end

	-- Get target floating Y height
	local targetY
	if isAscending then
		local elapsed = tick() - ascendStartTime
		if elapsed < ascendDuration then
			targetY = ascendHeight
		else
			isAscending = false
			animTrack:AdjustSpeed(1)
			animTrack.Priority = Enum.AnimationPriority.Idle
		end
	else
		bounceTimer += dt * 2
		targetY = floatMin + math.sin(bounceTimer) * ((floatMax - floatMin) / 2)
	end

	-- Ground detection
	local ray = Ray.new(hrp.Position, Vector3.new(0, -12, 0))
	local hit, groundPos = workspace:FindPartOnRay(ray, character)

	if hit then
		local desiredY = groundPos.Y + targetY
		local diff = desiredY - hrp.Position.Y
		hrp.Velocity = Vector3.new(hrp.Velocity.X, diff * 10, hrp.Velocity.Z)
	else
		-- Fall at 3/5 speed
		hrp.Velocity = Vector3.new(hrp.Velocity.X, hrp.Velocity.Y * 0.6, hrp.Velocity.Z)
	end

	-- Movement-based tilt
	if moveVector.Magnitude > 0 then
		local camera = workspace.CurrentCamera
		local moveDirWorld = (camera.CFrame:VectorToWorldSpace(moveVector)).Unit
		local tiltX = math.clamp(-moveDirWorld.Z, -1, 1) * math.rad(10)
		local tiltZ = math.clamp(moveDirWorld.X, -1, 1) * math.rad(10)
		hrp.CFrame = CFrame.new(hrp.Position) * CFrame.Angles(tiltX, hrp.Orientation.Y * math.pi / 180, tiltZ)
	end
end)
