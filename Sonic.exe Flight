local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- State
local flying = false
local descending = false
local maxSpeed = 75
local startSpeed = 10
local acceleration = 0.1 -- slow accel for smooth feel
local deceleration = 0.3
local descentSpeed = 40
local currentSpeed = Vector3.new(0,0,0) -- velocity vector
local moveDir = Vector3.zero

-- Animation IDs
local anims = {
	idle = "rbxassetid://101166618473023",
	slow = "rbxassetid://81150683491044",
	fast = "rbxassetid://131369481104313",
	land = "rbxassetid://92837953970970"
}

local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)

local tracks = {}
for name, id in pairs(anims) do
	local anim = Instance.new("Animation")
	anim.AnimationId = id
	tracks[name] = animator:LoadAnimation(anim)
end

local function stopAllFlightAnimations()
	for _, track in pairs(tracks) do
		if track.IsPlaying then
			track:Stop()
		end
	end
end

local function tiltBodyTowards(dir, dt)
	if dir.Magnitude > 0 then
		local currentCF = hrp.CFrame
		local goalCF = CFrame.new(hrp.Position, hrp.Position + dir)
		hrp.CFrame = currentCF:Lerp(goalCF, dt * 2.5)
	end
end

local moveKeys = {
	[Enum.KeyCode.W] = 1,
	[Enum.KeyCode.S] = -1,
	[Enum.KeyCode.A] = -1,
	[Enum.KeyCode.D] = 1,
}
local heldKeys = {}

UserInputService.InputBegan:Connect(function(input, gpe)
	if not gpe and moveKeys[input.KeyCode] then
		heldKeys[input.KeyCode] = true
	end
end)
UserInputService.InputEnded:Connect(function(input)
	if moveKeys[input.KeyCode] then
		heldKeys[input.KeyCode] = nil
	end
end)

local function getMoveDirection()
	local camCF = workspace.CurrentCamera.CFrame
	local forward = camCF.LookVector.Unit
	local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit

	local direction = Vector3.zero

	-- Forward/back
	if heldKeys[Enum.KeyCode.W] then
		direction += forward
	end
	if heldKeys[Enum.KeyCode.S] then
		direction -= forward
	end

	-- Strafe left/right (horizontal only)
	if heldKeys[Enum.KeyCode.A] then
		direction -= right
	end
	if heldKeys[Enum.KeyCode.D] then
		direction += right
	end

	if direction.Magnitude > 0 then
		return direction.Unit
	end
	return Vector3.zero
end

local function startFlight()
	if flying then return end
	flying = true
	descending = false
	currentSpeed = Vector3.new(0,0,0)

	local goalPos = hrp.Position + Vector3.new(0,4,0)
	local floatTween = TweenService:Create(hrp, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {CFrame = CFrame.new(goalPos)})
	floatTween:Play()
	floatTween.Completed:Wait()

	humanoid.WalkSpeed = 0

	RunService:BindToRenderStep("FlightControl", Enum.RenderPriority.Input.Value, function(dt)
		local inputDir = getMoveDirection()

		if inputDir.Magnitude > 0 then
			currentSpeed = currentSpeed:Lerp(inputDir * maxSpeed, acceleration)
		else
			currentSpeed = currentSpeed:Lerp(Vector3.new(0,0,0), deceleration)
		end

		hrp.Velocity = currentSpeed

		tiltBodyTowards(currentSpeed, dt)

		stopAllFlightAnimations()
		local speedMag = currentSpeed.Magnitude
		if speedMag < 1 then
			tracks.idle:Play()
		elseif speedMag < 30 then
			tracks.slow:Play()
		else
			tracks.fast:Play()
		end
	end)
end

local function startDescent()
	if not flying or descending then return end
	descending = true
	RunService:UnbindFromRenderStep("FlightControl")

	local camCF = workspace.CurrentCamera.CFrame
	local descendDir = (Vector3.new(camCF.LookVector.X, -1, camCF.LookVector.Z)).Unit

	RunService:BindToRenderStep("DescentControl", Enum.RenderPriority.Input.Value, function(dt)
		local fallVelocity = descendDir * descentSpeed
		hrp.Velocity = fallVelocity

		tiltBodyTowards(descendDir, dt)

		local ray = Ray.new(hrp.Position, Vector3.new(0, -3, 0))
		local hit = workspace:FindPartOnRay(ray, character)
		if hit then
			stopAllFlightAnimations()
			RunService:UnbindFromRenderStep("DescentControl")

			tracks.land:Play()
			task.wait(tracks.land.Length or 1)

			humanoid.WalkSpeed = 45
			flying = false
			descending = false
			currentSpeed = Vector3.new(0,0,0)
			moveDir = Vector3.zero
		end
	end)
end

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not flying then
			startFlight()
		elseif not descending then
			startDescent()
		end
	end
end)
