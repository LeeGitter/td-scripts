local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- UI Setup: ScreenGui with TextBox and toggle instruction
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FNFLoaderGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local inputFrame = Instance.new("Frame")
inputFrame.Size = UDim2.new(0, 400, 0, 80)
inputFrame.Position = UDim2.new(0.5, -200, 0, 20)
inputFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
inputFrame.BorderSizePixel = 0
inputFrame.Parent = screenGui

local urlBox = Instance.new("TextBox")
urlBox.Size = UDim2.new(1, -20, 0, 40)
urlBox.Position = UDim2.new(0, 10, 0, 10)
urlBox.PlaceholderText = "Paste GitHub Raw JSON URL here"
urlBox.ClearTextOnFocus = false
urlBox.Text = ""
urlBox.TextColor3 = Color3.new(1,1,1)
urlBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
urlBox.Parent = inputFrame

local instructionLabel = Instance.new("TextLabel")
instructionLabel.Size = UDim2.new(1, -20, 0, 20)
instructionLabel.Position = UDim2.new(0, 10, 0, 55)
instructionLabel.BackgroundTransparency = 1
instructionLabel.TextColor3 = Color3.new(1,1,1)
instructionLabel.Font = Enum.Font.SourceSans
instructionLabel.TextSize = 14
instructionLabel.Text = "Press T to load & toggle notes display"
instructionLabel.Parent = inputFrame

-- Container for notes display GUI
local notesScreenGui
local notesContainer

local directionColors = {
    [0] = Color3.fromRGB(0, 255, 255),  -- Left - Cyan
    [1] = Color3.fromRGB(255, 0, 0),    -- Down - Red
    [2] = Color3.fromRGB(0, 255, 0),    -- Up - Green
    [3] = Color3.fromRGB(255, 255, 0)   -- Right - Yellow
}

local notesObjects = {}
local guiEnabled = false

local noteGuiSize = Vector2.new(30, 30)
local spawnY = 600  -- start near bottom of screen (pixels)
local despawnY = -40 -- remove note when above this Y

local scrollSpeed = 100 -- default in case speed isn't found

local allNotes = {}

local function createNoteSquare(direction)
    local square = Instance.new("Frame")
    square.Size = UDim2.new(0, noteGuiSize.X, 0, noteGuiSize.Y)
    square.BackgroundColor3 = directionColors[direction] or Color3.new(1,1,1)
    square.BorderSizePixel = 1
    square.BorderColor3 = Color3.new(0, 0, 0)
    square.AnchorPoint = Vector2.new(0.5, 0.5)
    return square
end

local function createNotesGui()
    notesScreenGui = Instance.new("ScreenGui")
    notesScreenGui.Name = "FNFNotesDisplay"
    notesScreenGui.ResetOnSpawn = false
    notesScreenGui.Parent = playerGui

    notesContainer = Instance.new("Frame")
    notesContainer.Name = "NotesContainer"
    notesContainer.AnchorPoint = Vector2.new(0.5, 1)
    notesContainer.Position = UDim2.new(0.5, 0, 1, 0) -- bottom center
    notesContainer.Size = UDim2.new(1, 0, 1, 0)
    notesContainer.BackgroundTransparency = 1
    notesContainer.Parent = notesScreenGui

    notesObjects = {}

    local lanesX = {
        [0] = 0.25,
        [1] = 0.45,
        [2] = 0.65,
        [3] = 0.85,
    }

    for _, note in ipairs(allNotes) do
        local time, direction = note[1], note[2]

        local square = createNoteSquare(direction)

        local laneX = lanesX[direction] or 0.5
        square.Position = UDim2.new(laneX, 0, 0, spawnY)
        square.Parent = notesContainer

        table.insert(notesObjects, {
            Gui = square,
            Time = time,
            Direction = direction,
            YPos = spawnY,
        })
    end
end

local function removeNotesGui()
    if notesScreenGui then
        notesScreenGui:Destroy()
        notesScreenGui = nil
        notesObjects = {}
    end
end

local function toggleNotesDisplay()
    if guiEnabled then
        removeNotesGui()
        guiEnabled = false
    else
        if #allNotes == 0 then
            warn("No notes loaded. Please enter a valid JSON URL and press T again.")
            return
        end
        createNotesGui()
        guiEnabled = true
    end
end

local function flattenNotes(sections)
    local flatNotes = {}
    for _, section in ipairs(sections) do
        for _, note in ipairs(section.sectionNotes or {}) do
            table.insert(flatNotes, note)
        end
    end
    -- Sort ascending by time
    table.sort(flatNotes, function(a,b) return a[1] < b[1] end)
    return flatNotes
end

local function loadChartFromUrl(url)
    local success, response = pcall(function()
        return HttpService:GetAsync(url)
    end)
    if not success then
        warn("Failed to get JSON: ", response)
        return false
    end

    local successDecode, data = pcall(function()
        return HttpService:JSONDecode(response)
    end)
    if not successDecode then
        warn("Failed to decode JSON: ", data)
        return false
    end

    -- Validate data format
    if not data.song or not data.song.notes then
        warn("Invalid chart JSON structure")
        return false
    end

    scrollSpeed = 100 * (data.song.speed or 3)
    allNotes = flattenNotes(data.song.notes)
    print("Chart loaded: " .. tostring(#allNotes) .. " notes")
    return true
end

-- Scrolling logic
local lastUpdate = tick()

RunService.RenderStepped:Connect(function()
    if not guiEnabled then return end

    local now = tick()
    local dt = now - lastUpdate
    lastUpdate = now

    for i = #notesObjects, 1, -1 do
        local noteObj = notesObjects[i]
        noteObj.YPos = noteObj.YPos - scrollSpeed * dt
        if noteObj.YPos < despawnY then
            noteObj.Gui:Destroy()
            table.remove(notesObjects, i)
        else
            noteObj.Gui.Position = UDim2.new(noteObj.Gui.Position.X.Scale, noteObj.Gui.Position.X.Offset, 0, noteObj.YPos)
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.T then
        if not guiEnabled then
            local url = urlBox.Text
            if url == "" then
                warn("Please enter a valid URL!")
                return
            end
            local loaded = loadChartFromUrl(url)
            if loaded then
                toggleNotesDisplay()
            end
        else
            toggleNotesDisplay()
        end
    end
end)
