local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
local thisScript = script

-- Animation IDs
local animations = {
	Z = "rbxassetid://78439251750221",
	X = "rbxassetid://77221510148981",
	Comma = "rbxassetid://92837953970970",
	Period = "rbxassetid://126889161151367"
}

local idleAnimationId = "rbxassetid://92831241851962"

local animationMode = false
local currentTrack = nil
local currentKey = nil
local loopConnection = nil
local inputBeganConnection
local inputEndedConnection

local introEndTime = 1
local loopStartTime = 1
local loopEndTime = 2
local outroStartTime = 2

local idleTrack = nil
local idleDelayTask = nil
local newAnimStarting = false
local canPlayAnimations = true -- this gets stuck false sometimes without reset

-- üí• Reset Animator completely (stops ALL animations)
local function resetAnimator()
	if animator then
		animator:Destroy()
	end
	animator = Instance.new("Animator")
	animator.Parent = humanoid
end

-- üí§ Play idle animation
local function playIdle()
	if not canPlayAnimations then return end
	if idleTrack then
		idleTrack:Stop(0)
		idleTrack:Destroy()
	end
	local idleAnim = Instance.new("Animation")
	idleAnim.AnimationId = idleAnimationId
	idleTrack = animator:LoadAnimation(idleAnim)
	idleTrack.Priority = Enum.AnimationPriority.Idle
	idleTrack.Looped = true
	idleTrack:Play()
end

-- üõë Stop idle animation
local function stopIdle()
	if idleTrack then
		idleTrack:Stop(0)
		idleTrack:Destroy()
		idleTrack = nil
	end
end

-- ‚ùå Fully stop current animation
local function stopCurrent()
	if currentTrack then
		currentTrack:Stop(0)
		currentTrack:Destroy()
		currentTrack = nil
	end
	if loopConnection then
		loopConnection:Disconnect()
		loopConnection = nil
	end
	currentKey = nil
	stopIdle()
	resetAnimator()
	canPlayAnimations = true -- restore anim playability just in case
end

-- ‚è≥ Schedule idle after delay unless interrupted
local function scheduleIdle()
	if idleDelayTask then
		idleDelayTask:Cancel()
	end
	idleDelayTask = task.delay(0.15, function()
		idleDelayTask = nil
		if not newAnimStarting and not currentTrack and animationMode and canPlayAnimations then
			playIdle()
		end
	end)
end

-- ‚ñ∂Ô∏è Play split animation (intro ‚Üí loop ‚Üí outro)
local function playSplitAnimation(animId, key)
	if not canPlayAnimations then return end
	newAnimStarting = true
	stopCurrent()

	local anim = Instance.new("Animation")
	anim.AnimationId = animId
	local track = animator:LoadAnimation(anim)
	track.Priority = Enum.AnimationPriority.Action4
	track.Looped = false
	currentTrack = track
	currentKey = key

	track:Play()
	track.TimePosition = 0

	task.delay(introEndTime, function()
		if currentTrack ~= track or currentKey ~= key then return end
		track.TimePosition = loopStartTime
		track.Looped = true
		track:Play()
	end)

	loopConnection = RunService.RenderStepped:Connect(function()
		if currentTrack == track and currentKey ~= key then
			loopConnection:Disconnect()
			loopConnection = nil
			track.Looped = false
			track.TimePosition = outroStartTime
			track:Play()
			currentTrack = nil
			newAnimStarting = false
			scheduleIdle()
		end
	end)
end

-- üó∫ Key mappings
local keyMap = {
	[Enum.KeyCode.Z] = "Z",
	[Enum.KeyCode.X] = "X",
	[Enum.KeyCode.Comma] = "Comma",
	[Enum.KeyCode.Period] = "Period"
}

-- üéÆ Input Began
inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.T then
		animationMode = not animationMode

		if animationMode then
			stopIdle()
			canPlayAnimations = true -- Restore broken play state
		else
			stopCurrent()
			newAnimStarting = false
			playIdle()
		end

		return
	end

	if input.KeyCode == Enum.KeyCode.U then
		stopCurrent()
		if inputBeganConnection then inputBeganConnection:Disconnect() end
		if inputEndedConnection then inputEndedConnection:Disconnect() end
		if thisScript and thisScript:IsDescendantOf(game) then
			thisScript:Destroy()
		end
		return
	end

	if not animationMode or not canPlayAnimations then return end

	local key = keyMap[input.KeyCode]
	if key and animations[key] then
		playSplitAnimation(animations[key], key)
	end
end)

-- üõë Input Ended (to trigger outro)
inputEndedConnection = UserInputService.InputEnded:Connect(function(input)
	local key = keyMap[input.KeyCode]
	if key and key == currentKey then
		currentKey = nil
	end
end)

-- ‚úÖ Start with idle animation
playIdle()
