local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")
local thisScript = script

-- Animation IDs
local animations = {
	Z = "rbxassetid://78439251750221",
	X = "rbxassetid://77221510148981",
	Comma = "rbxassetid://92837953970970",
	Period = "rbxassetid://126889161151367"
}

local animationMode = false
local currentTrack = nil
local currentKey = nil
local loopConnection = nil
local inputBeganConnection
local inputEndedConnection

-- Timings in seconds
local introEndTime = 1
local loopStartTime = 1
local loopEndTime = 2
local outroStartTime = 2

-- Forcefully stop current animation and clear state immediately
local function stopCurrent()
	if currentTrack then
		currentTrack:Stop(0) -- no fade out
		currentTrack:Destroy() -- full removal to avoid blending
		currentTrack = nil
	end
	if loopConnection then
		loopConnection:Disconnect()
		loopConnection = nil
	end
	currentKey = nil
end

-- Play animation with intro, loop middle, outro after release
local function playSplitAnimation(animId, key)
	stopCurrent() -- force stop previous animation immediately

	local anim = Instance.new("Animation")
	anim.AnimationId = animId
	local track = animator:LoadAnimation(anim)
	track.Priority = Enum.AnimationPriority.Action4
	track.Looped = false
	currentTrack = track
	currentKey = key

	track:Play()
	track.TimePosition = 0

	-- After intro finishes, start looping middle
	task.delay(introEndTime, function()
		if currentTrack ~= track or currentKey ~= key then return end
		track.TimePosition = loopStartTime
		track.Looped = true
		track:Play()
	end)

	-- Monitor key release to play outro
	loopConnection = RunService.RenderStepped:Connect(function()
		if currentTrack == track and currentKey ~= key then
			loopConnection:Disconnect()
			loopConnection = nil
			track.Looped = false
			track.TimePosition = outroStartTime
			track:Play()
			currentTrack = nil
		end
	end)
end

-- Map KeyCode to string keys
local keyMap = {
	[Enum.KeyCode.Z] = "Z",
	[Enum.KeyCode.X] = "X",
	[Enum.KeyCode.Comma] = "Comma",
	[Enum.KeyCode.Period] = "Period"
}

-- Input began
inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.T then
		animationMode = not animationMode
		if not animationMode then
			stopCurrent()
		end
		return
	end

	if input.KeyCode == Enum.KeyCode.U then
		stopCurrent()
		if inputBeganConnection then inputBeganConnection:Disconnect() end
		if inputEndedConnection then inputEndedConnection:Disconnect() end
		if thisScript and thisScript:IsDescendantOf(game) then
			thisScript:Destroy()
		end
		return
	end

	if not animationMode then return end

	local key = keyMap[input.KeyCode]
	if key and animations[key] then
		playSplitAnimation(animations[key], key)
	end
end)

-- Input ended
inputEndedConnection = UserInputService.InputEnded:Connect(function(input)
	local key = keyMap[input.KeyCode]
	if key and key == currentKey then
		currentKey = nil
	end
end)
