local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy, floatVelocity, marker = nil, nil, nil
local moveConn, pathConn, flyConn = nil, nil, nil
local pathEnd = nil

-- Noclip utility
local function setNoclip(model, state)
	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.CanCollide = not state
		end
	end
end

-- Create marker
local function placeMarker(position)
	if marker then marker:Destroy() end
	marker = Instance.new("Part")
	marker.Anchored = true
	marker.CanCollide = false
	marker.Size = Vector3.new(3, 0.5, 3)
	marker.Material = Enum.Material.Neon
	marker.Color = Color3.fromRGB(0, 255, 255)
	marker.CFrame = CFrame.new(position)
	marker.Parent = workspace
end

local function removeMarker()
	if marker then marker:Destroy() marker = nil end
end

-- Spawn clone with retry protection
local function spawnClone(position)
	local desc = nil
	for i = 1, 5 do
		local success, result = pcall(function()
			return Players:GetHumanoidDescriptionFromUserId(player.UserId)
		end)
		if success and result then
			desc = result
			break
		else
			task.wait(0.2)
		end
	end
	if not desc then warn("Failed to get HumanoidDescription") return nil end

	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if not hrp then return nil end
	hrp.CFrame = CFrame.new(position)
	hrp.Anchored = false
	hrp.CanCollide = false

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Begin clone control
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 4, 0)

	dummy = spawnClone(hrp.Position - Vector3.new(0, 4, 0))
	if not dummy then return end

	local dHumanoid = dummy:WaitForChild("Humanoid")
	local dHRP = dummy:WaitForChild("HumanoidRootPart")
	camera.CameraSubject = dHumanoid

	floatVelocity = Instance.new("BodyVelocity")
	floatVelocity.MaxForce = Vector3.new(0, 1e5, 0)
	floatVelocity.Velocity = Vector3.zero
	floatVelocity.Parent = dHRP

	moveConn = RunService.RenderStepped:Connect(function()
		if not dummy or not dHRP then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		local camCF = camera.CFrame
		local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
		local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
		local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit

		if moveVec.Magnitude > 0 then
			dHumanoid:Move(moveDir, false)
			dHRP.CFrame = CFrame.new(dHRP.Position, dHRP.Position + moveDir)
		else
			dHumanoid:Move(Vector3.zero, false)
		end

		-- Float upward only when space is held
		if UIS:IsKeyDown(Enum.KeyCode.Space) then
			floatVelocity.Velocity = Vector3.new(0, 50, 0)
		else
			floatVelocity.Velocity = Vector3.zero
		end
	end)

	-- Continuously update the last position
	pathConn = RunService.Heartbeat:Connect(function()
		if dummy and dummy:FindFirstChild("HumanoidRootPart") then
			pathEnd = dummy.HumanoidRootPart.Position
		end
	end)
end

-- Real character flies smoothly
local function flyToDestination(destination)
	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	camera.CameraSubject = humanoid
	hrp.Anchored = false
	setNoclip(char, true)
	humanoid.AutoRotate = false

	local start = hrp.Position
	local totalDist = (destination - start).Magnitude
	local elapsed = 0
	local maxTime = 1.5
	local velocity = Vector3.zero

	flyConn = RunService.RenderStepped:Connect(function(dt)
		elapsed += dt
		local t = math.clamp(elapsed / maxTime, 0, 1)
		local eased = t * t
		local speed = totalDist / maxTime * (1 + 2 * eased)

		local toTarget = (destination - hrp.Position)
		if toTarget.Magnitude <= speed * dt then
			hrp.CFrame = CFrame.new(destination)
			hrp.Velocity = Vector3.zero -- Prevent momentum carry
			flyConn:Disconnect()
			setNoclip(char, false)
			humanoid.AutoRotate = true
			removeMarker()
			return
		end

		velocity = velocity:Lerp(toTarget.Unit * speed, 0.3)
		hrp.Velocity = velocity
	end)
end

-- End control and fly
local function endControl()
	active = false

	if moveConn then moveConn:Disconnect() end
	if pathConn then pathConn:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	hrp.Anchored = false

	if pathEnd then
		placeMarker(pathEnd)
		flyToDestination(pathEnd)
	end
end

-- Toggle T
UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
