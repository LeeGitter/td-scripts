local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local StarterPlayer = game:GetService("StarterPlayer")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil

-- Load a real R6 dummy
local function loadR6Dummy(position)
	local dummy = Instance.new("Model")
	dummy.Name = "ControlledDummy"

	-- Add Humanoid
	local humanoid = Instance.new("Humanoid")
	humanoid.Name = "Humanoid"
	humanoid.Parent = dummy

	-- Load classic R6 rig parts
	local function createPart(name, size, position)
		local part = Instance.new("Part")
		part.Name = name
		part.Size = size
		part.Anchored = false
		part.CanCollide = true
		part.Position = position
		part.TopSurface = Enum.SurfaceType.Smooth
		part.BottomSurface = Enum.SurfaceType.Smooth
		part.Parent = dummy
		return part
	end

	local function addWeld(part0, part1, c0)
		local weld = Instance.new("Motor6D")
		weld.Part0 = part0
		weld.Part1 = part1
		weld.C0 = c0 or CFrame.new()
		weld.Parent = part0
	end

	local root = createPart("HumanoidRootPart", Vector3.new(2, 2, 1), position)
	local torso = createPart("Torso", Vector3.new(2, 2, 1), position)
	local head = createPart("Head", Vector3.new(2, 1, 1), position + Vector3.new(0, 3, 0))

	addWeld(root, torso)
	addWeld(torso, head, CFrame.new(0, 1.5, 0))

	-- Required attachments for humanoid
	local face = Instance.new("Decal")
	face.Name = "face"
	face.Texture = "rbxasset://textures/face.png"
	face.Face = Enum.NormalId.Front
	face.Parent = head

	local neck = Instance.new("Motor6D")
	neck.Name = "Neck"
	neck.Part0 = torso
	neck.Part1 = head
	neck.C0 = CFrame.new(0, 1.5, 0)
	neck.Parent = torso

	dummy.PrimaryPart = root
	dummy:SetPrimaryPartCFrame(CFrame.new(position))
	dummy.Parent = workspace

	return dummy
end

local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	-- Float and freeze real player
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 10, 0)

	-- Spawn dummy underneath
	dummy = loadR6Dummy(hrp.Position - Vector3.new(0, 4, 0))
	local dummyHumanoid = dummy:FindFirstChild("Humanoid")

	-- Set camera to dummy
	camera.CameraSubject = dummyHumanoid

	-- Record path
	local lastPos = dummy.PrimaryPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local pos = dummy.PrimaryPart.Position
		if (pos - lastPos).Magnitude > 2 then
			createPathPoint(pos)
			lastPos = pos
		end
	end)
end

local function endControl()
	active = false

	-- Stop recording
	if pathConnection then pathConnection:Disconnect() end

	-- Delete dummy
	if dummy then
		dummy:Destroy()
	end

	-- Restore player
	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")
	hrp.Anchored = false
	camera.CameraSubject = humanoid

	-- Walk the path
	coroutine.wrap(function()
		for _, p in ipairs(path) do
			local goal = p.Position + Vector3.new(0, 1, 0)
			local dist = (hrp.Position - goal).Magnitude
			local tween = TweenService:Create(hrp, TweenInfo.new(dist / 16, Enum.EasingStyle.Linear), {
				CFrame = CFrame.new(goal)
			})
			tween:Play()
			tween.Completed:Wait()
		end

		for _, p in ipairs(path) do
			p:Destroy()
		end
		table.clear(path)
	end)()
end

UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
