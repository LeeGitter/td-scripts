local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil
local walkConnection = nil

-- Create glowing path point
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Spawn a clone (R6 dummy with appearance)
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.Transparency = 1
		hrp.CanCollide = false
		hrp.CFrame = CFrame.new(position)
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Control the clone
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- Anchor real player to freeze, but no float
	hrp.Anchored = true

	-- Spawn clone at current player position
	dummy = spawnDummy(hrp.Position)
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	camera.CameraSubject = dummyHumanoid
	camera.CameraType = Enum.CameraType.Custom

	-- Movement controls (camera-relative)
	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
			local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit
			dummyHumanoid:Move(moveDir, false)

			-- Rotate clone to face movement
			local root = dummy:FindFirstChild("HumanoidRootPart")
			if root then
				root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
			end
		else
			dummyHumanoid:Move(Vector3.zero, false)
		end
	end)

	-- Record path
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root and (root.Position - lastPos).Magnitude >= 2 then
			createPathPoint(root.Position)
			lastPos = root.Position
		end
	end)
end

-- Make the real player walk the recorded path using physics
local function walkPath()
	local char = player.Character or player.CharacterAdded:Wait()
	local humanoid = char:WaitForChild("Humanoid")
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- Force normal physics
	hrp.Anchored = false
	camera.CameraSubject = humanoid
	camera.CameraType = Enum.CameraType.Custom

	if #path == 0 then return end

	local stepIndex = 1
	local reachedPoint = true
	local moveDir = Vector3.zero

	walkConnection = RunService.RenderStepped:Connect(function()
		if not humanoid or not hrp or not path[stepIndex] then
			walkConnection:Disconnect()
			for _, p in path do p:Destroy() end
			table.clear(path)
			return
		end

		local target = path[stepIndex].Position + Vector3.new(0, 1, 0)
		local toTarget = (target - hrp.Position)
		local flatDir = Vector3.new(toTarget.X, 0, toTarget.Z)

		if flatDir.Magnitude < 1 then
			stepIndex += 1
			if stepIndex > #path then
				walkConnection:Disconnect()
				for _, p in path do p:Destroy() end
				table.clear(path)
			end
			return
		end

		moveDir = flatDir.Unit
		humanoid:Move(moveDir, false)

		-- Face direction
		hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + moveDir)
	end)
end

-- End clone control and start path walk
local function endControl()
	active = false

	if pathConnection then pathConnection:Disconnect() end
	if moveConnection then moveConnection:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	char:WaitForChild("HumanoidRootPart").Anchored = false

	walkPath()
end

-- Keybind: T to toggle control/walk mode
UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
