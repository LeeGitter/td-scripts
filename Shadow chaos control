local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local clone, floatForce, marker = nil, nil, nil
local pathEnd = nil
local isControlling = false
local moveConn, updateConn, flyConn = nil, nil, nil

local descendTime = 0.2
local descendDistance = 10
local descendTimer = 0

-- Noclip utility
local function setNoclip(model, state)
	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.CanCollide = not state
		end
	end
end

-- Create marker
local function createMarker(position)
	if marker then marker:Destroy() end
	marker = Instance.new("Part")
	marker.Size = Vector3.new(3, 0.5, 3)
	marker.Anchored = true
	marker.CanCollide = false
	marker.Material = Enum.Material.Neon
	marker.Color = Color3.fromRGB(0, 255, 255)
	marker.CFrame = CFrame.new(position)
	marker.Parent = workspace
end

local function clearMarker()
	if marker then
		marker:Destroy()
		marker = nil
	end
end

-- Spawn controllable clone
local function spawnClone(position)
	local desc = nil
	for i = 1, 5 do
		local success, result = pcall(function()
			return Players:GetHumanoidDescriptionFromUserId(player.UserId)
		end)
		if success and result then
			desc = result
			break
		end
		task.wait(0.2)
	end
	if not desc then return nil end

	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Material = Enum.Material.ForceField
			part.Color = Color3.fromRGB(255, 0, 0)
		end
	end

	local hrp = model:WaitForChild("HumanoidRootPart")
	local humanoid = model:WaitForChild("Humanoid")
	if not hrp or not humanoid then return nil end

	hrp.CFrame = CFrame.new(position)
	humanoid.WalkSpeed = 50
	model.Parent = workspace
	return model
end

-- Begin control
local function beginControl()
	isControlling = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 4, 0)

	clone = spawnClone(hrp.Position - Vector3.new(0, 4, 0))
	if not clone then return end

	local cloneHRP = clone:WaitForChild("HumanoidRootPart")
	local cloneHumanoid = clone:WaitForChild("Humanoid")

	camera.CameraSubject = cloneHumanoid

	floatForce = Instance.new("BodyVelocity")
	floatForce.MaxForce = Vector3.new(0, 100000, 0)
	floatForce.Velocity = Vector3.zero
	floatForce.Parent = cloneHRP

	descendTimer = 0

	moveConn = RunService.RenderStepped:Connect(function(dt)
		local moveInput = Vector3.zero
		if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveInput += Vector3.new(0, 0, 1) end
		if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveInput += Vector3.new(0, 0, -1) end
		if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveInput += Vector3.new(-1, 0, 0) end
		if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveInput += Vector3.new(1, 0, 0) end

		if moveInput.Magnitude > 0 then
			local camCF = camera.CFrame
			local moveDir = (camCF.RightVector * moveInput.X + camCF.LookVector * moveInput.Z).Unit
			cloneHumanoid:Move(Vector3.new(moveDir.X, 0, moveDir.Z), false)
			cloneHRP.CFrame = CFrame.new(cloneHRP.Position, cloneHRP.Position + moveDir)
		else
			cloneHumanoid:Move(Vector3.zero, false)
		end

		if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
			floatForce.Velocity = Vector3.new(0, 60, 0)
			descendTimer = 0
		else
			descendTimer += dt
			if descendTimer >= descendTime then
				descendTimer = 0
			end
			local downwardSpeed = descendDistance / descendTime -- 50 studs/sec downward velocity
			floatForce.Velocity = Vector3.new(0, -downwardSpeed, 0)
		end
	end)

	updateConn = RunService.Heartbeat:Connect(function()
		if clone and clone:FindFirstChild("HumanoidRootPart") then
			pathEnd = clone.HumanoidRootPart.Position
		end
	end)
end

-- End control and fly to destination
local function endControl()
	isControlling = false
	if moveConn then moveConn:Disconnect() end
	if updateConn then updateConn:Disconnect() end
	if clone then clone:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	hrp.Anchored = false
	camera.CameraSubject = humanoid

	if not pathEnd then return end
	createMarker(pathEnd)

	setNoclip(char, true)
	humanoid.AutoRotate = false

	local start = hrp.Position
	local totalDistance = (pathEnd - start).Magnitude
	local elapsed = 0
	local duration = 1.5
	local velocity = Vector3.zero

	flyConn = RunService.RenderStepped:Connect(function(dt)
		elapsed += dt
		local t = math.clamp(elapsed / duration, 0, 1)
		local eased = t * t
		local speed = totalDistance / duration * (1 + 2 * eased)
		local direction = (pathEnd - hrp.Position)
		if direction.Magnitude <= speed * dt then
			hrp.CFrame = CFrame.new(pathEnd)
			hrp.Velocity = Vector3.zero
			flyConn:Disconnect()
			setNoclip(char, false)
			humanoid.AutoRotate = true
			clearMarker()
			return
		end
		velocity = velocity:Lerp(direction.Unit * speed, 0.3)
		hrp.Velocity = velocity
	end)
end

-- Keybind: T to toggle
UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if isControlling then
			endControl()
		else
			beginControl()
		end
	end
end)
