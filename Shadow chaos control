local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil

local cloneSpawnPosition = nil

-- Create glowing path part
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Spawn R6 dummy with your appearance, but fully invisible, hide HRP
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)

	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 1 -- Fully invisible
			part.CanCollide = false
			part.Material = Enum.Material.SmoothPlastic
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.Transparency = 1
		hrp.CanCollide = false
		for _, child in hrp:GetChildren() do
			if child:IsA("Decal") or child:IsA("Mesh") or child:IsA("Attachment") then
				child:Destroy()
			end
		end
		hrp.CFrame = CFrame.new(position)
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Begin controlling the dummy
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- Float and anchor player 3 studs up (visible)
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 3, 0)

	-- Spawn dummy and set camera
	cloneSpawnPosition = hrp.Position - Vector3.new(0, 4, 0)
	dummy = spawnDummy(cloneSpawnPosition)
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	camera.CameraSubject = dummyHumanoid

	-- Movement handling
	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end -- flipped Z sign here
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = camCF.LookVector * Vector3.new(1, 0, 1)
			local right = camCF.RightVector * Vector3.new(1, 0, 1)
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit

			-- Limit clone movement within 200 studs radius from spawn
			local root = dummy:FindFirstChild("HumanoidRootPart")
			if root then
				local proposedPos = root.Position + moveDir * dummy:FindFirstChildOfClass("Humanoid").WalkSpeed * RunService.RenderStepped:Wait()
				if (proposedPos - cloneSpawnPosition).Magnitude <= 200 then
					dummy:FindFirstChildOfClass("Humanoid"):Move(moveDir, false)
					root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
				else
					dummy:FindFirstChildOfClass("Humanoid"):Move(Vector3.zero, false)
				end
			end
		else
			dummy:FindFirstChildOfClass("Humanoid"):Move(Vector3.zero, false)
		end
	end)

	-- Path tracking
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root and (root.Position - lastPos).Magnitude >= 2 then
			createPathPoint(root.Position)
			lastPos = root.Position
		end
	end)
end

-- Smoothly glide your real character through path with acceleration, retaining animations
local function glideAlongPath(hrp, humanoid, pathPoints)
	if #pathPoints == 0 then return end

	local maxTime = 8
	local startSpeed = 2
	local maxSpeed = 300
	local elapsed = 0

	-- Calculate total distance
	local totalDist = 0
	for i = 2, #pathPoints do
		totalDist += (pathPoints[i].Position - pathPoints[i-1].Position).Magnitude
	end
	if totalDist == 0 then return end

	-- Coroutine to smoothly move the humanoid along the path using Humanoid:Move
	coroutine.wrap(function()
		for i = 1, #pathPoints do
			local targetPos = pathPoints[i].Position + Vector3.new(0, 1, 0)
			while (hrp.Position - targetPos).Magnitude > 0.5 do
				local dist = (hrp.Position - targetPos).Magnitude
				local speed = math.min(startSpeed + (maxSpeed - startSpeed) * (elapsed / maxTime), maxSpeed)
				local direction = (targetPos - hrp.Position).Unit
				humanoid:Move(direction, false)
				-- Move character root part CFrame orientation smoothly towards movement direction
				hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + direction)
				wait(0.03)
				elapsed = math.min(elapsed + 0.03, maxTime)
			end
			-- Stop movement briefly before next segment
			humanoid:Move(Vector3.new(0,0,0), false)
			wait(0.05)
		end
		-- Stop at the end and clear path points
		humanoid:Move(Vector3.new(0,0,0), false)
		for _, p in path do p:Destroy() end
		table.clear(path)
	end)()
end

-- End control and walk the path with smooth accelerating walkspeed capped for 8 seconds max
local function endControl()
	active = false

	if pathConnection then pathConnection:Disconnect() end
	if moveConnection then moveConnection:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	hrp.Anchored = false
	camera.CameraSubject = humanoid

	glideAlongPath(hrp, humanoid, path)
end

-- Toggle with T
UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
