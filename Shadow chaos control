local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil
local walkConnection = nil

-- Create glowing path point
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Clone spawner
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.Transparency = 1
		hrp.CanCollide = false
		hrp.CFrame = CFrame.new(position)
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Begin clone control
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- FLOAT 4 STUDS UP
	hrp.Anchored = true
	hrp.CFrame = hrp.CFrame + Vector3.new(0, 4, 0)

	dummy = spawnDummy(hrp.Position - Vector3.new(0, 4, 0))
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	camera.CameraSubject = dummyHumanoid
	camera.CameraType = Enum.CameraType.Custom

	-- Clone control
	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
			local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit
			dummyHumanoid:Move(moveDir, false)

			local root = dummy:FindFirstChild("HumanoidRootPart")
			if root then
				root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
			end
		else
			dummyHumanoid:Move(Vector3.zero, false)
		end
	end)

	-- Record path
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root and (root.Position - lastPos).Magnitude >= 2 then
			createPathPoint(root.Position)
			lastPos = root.Position
		end
	end)
end

-- Walk path using gradual speed
local function walkPath()
	local char = player.Character or player.CharacterAdded:Wait()
	local humanoid = char:WaitForChild("Humanoid")
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- Restore physics and camera
	hrp.Anchored = false
	camera.CameraSubject = humanoid
	camera.CameraType = Enum.CameraType.Custom

	if #path == 0 then return end

	local points = {hrp.Position}
	for _, p in ipairs(path) do
		table.insert(points, p.Position + Vector3.new(0, 1, 0))
	end

	-- Build path segments and total distance
	local segments = {}
	local totalLength = 0
	for i = 1, #points - 1 do
		local a, b = points[i], points[i+1]
		local dist = (b - a).Magnitude
		table.insert(segments, {start = a, finish = b, length = dist})
		totalLength += dist
	end

	local elapsed = 0
	local travel = 0
	local timeLimit = 5

	local current = 1
	local distOnSegment = 0

	walkConnection = RunService.RenderStepped:Connect(function(dt)
		if current > #segments then
			walkConnection:Disconnect()
			for _, p in path do p:Destroy() end
			table.clear(path)
			return
		end

		elapsed += dt
		local progress = math.clamp(elapsed / timeLimit, 0, 1)
		local easing = 0.1 + 0.9 * progress
		local speed = (totalLength / timeLimit) * easing

		local seg = segments[current]
		local dir = (seg.finish - seg.start).Unit
		local distRemain = seg.length - distOnSegment
		local step = speed * dt

		if step >= distRemain then
			distOnSegment = 0
			current += 1
			hrp.CFrame = CFrame.new(seg.finish, seg.finish + dir)
		else
			distOnSegment += step
			local pos = seg.start + dir * distOnSegment
			humanoid:Move(dir, false)
			hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + dir)
			hrp.Velocity = dir * speed
		end
	end)
end

-- End control and walk path
local function endControl()
	active = false

	if pathConnection then pathConnection:Disconnect() end
	if moveConnection then moveConnection:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	char:WaitForChild("HumanoidRootPart").Anchored = false

	walkPath()
end

-- Toggle with T
UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
