local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local marker = nil
local path = {}
local floatBodyVelocity = nil
local moveConnection, pathConnection, flyConnection = nil, nil, nil

-- Enable or disable noclip for a character
local function setNoclip(character, enabled)
	for _, part in character:GetDescendants() do
		if part:IsA("BasePart") then
			part.CanCollide = not enabled
		end
	end
end

-- Create a marker part
local function placeMarker(position)
	if marker then marker:Destroy() end
	marker = Instance.new("Part")
	marker.Anchored = true
	marker.CanCollide = false
	marker.Size = Vector3.new(3, 0.5, 3)
	marker.Material = Enum.Material.Neon
	marker.Color = Color3.fromRGB(0, 255, 255)
	marker.CFrame = CFrame.new(position)
	marker.Parent = workspace
end

local function removeMarker()
	if marker then
		marker:Destroy()
		marker = nil
	end
end

-- Create clone
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.CFrame = CFrame.new(position)
		hrp.Anchored = false
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Begin controlling clone
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")

	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 4, 0)

	dummy = spawnDummy(hrp.Position - Vector3.new(0, 4, 0))
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	local dummyHRP = dummy:FindFirstChild("HumanoidRootPart")

	camera.CameraSubject = dummyHumanoid

	-- Add BodyVelocity for clone float
	floatBodyVelocity = Instance.new("BodyVelocity")
	floatBodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
	floatBodyVelocity.Velocity = Vector3.zero
	floatBodyVelocity.Parent = dummyHRP

	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummyHRP then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		local camCF = camera.CFrame
		local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
		local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
		local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit

		dummyHumanoid:Move(moveVec.Magnitude > 0 and moveDir or Vector3.zero, false)

		-- Float logic
		local yVel = UIS:IsKeyDown(Enum.KeyCode.Space) and 50 or 0
		floatBodyVelocity.Velocity = Vector3.new(0, yVel, 0)
	end)

	-- Record final position
	pathConnection = RunService.Heartbeat:Connect(function()
		if dummyHRP then
			table.insert(path, dummyHRP.Position)
		end
	end)
end

-- Smooth flight back to destination
local function flyToDestination(destination)
	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	camera.CameraSubject = humanoid
	hrp.Anchored = false
	setNoclip(char, true)
	humanoid.AutoRotate = false

	local startPos = hrp.Position
	local totalDist = (destination - startPos).Magnitude
	local direction = (destination - startPos).Unit
	local elapsed = 0
	local maxTime = 1.5
	local velocity = Vector3.zero

	flyConnection = RunService.RenderStepped:Connect(function(dt)
		elapsed += dt
		local t = math.clamp(elapsed / maxTime, 0, 1)
		local ease = t * t
		local speed = totalDist / maxTime * (1 + 2 * ease)
		local toTarget = (destination - hrp.Position)
		if toTarget.Magnitude <= speed * dt then
			hrp.CFrame = CFrame.new(destination)
			flyConnection:Disconnect()
			setNoclip(char, false)
			humanoid.AutoRotate = true
			removeMarker()
			return
		end
		velocity = velocity:Lerp(toTarget.Unit * speed, 0.3)
		hrp.Velocity = velocity
	end)
end

-- End control and start flight
local function endControl()
	active = false
	if moveConnection then moveConnection:Disconnect() end
	if pathConnection then pathConnection:Disconnect() end

	local lastPos = dummy and dummy:FindFirstChild("HumanoidRootPart") and dummy.HumanoidRootPart.Position
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	char:WaitForChild("HumanoidRootPart").Anchored = false
	camera.CameraSubject = char:WaitForChild("Humanoid")

	if lastPos then
		placeMarker(lastPos)
		flyToDestination(lastPos)
	end
end

-- Toggle with T
UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
