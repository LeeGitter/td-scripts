local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil

local cloneSpawnPosition = nil

-- Create glowing path point
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Clone actual character with morphs, color red transparent, hide HRP, remove scripts
local function spawnDummy(position)
	local char = player.Character
	if not char then
		warn("spawnDummy: Player character not found!")
		return nil
	end

	local clone = char:Clone()
	clone.Name = "ControllableClone"
	clone.Parent = workspace

	for _, part in clone:GetDescendants() do
		if part:IsA("BasePart") then
			if part.Name == "HumanoidRootPart" then
				part.Transparency = 1
				part.CanCollide = false
				for _, child in part:GetChildren() do
					if child:IsA("Decal") or child:IsA("Mesh") or child:IsA("Attachment") then
						child:Destroy()
					end
				end
			else
				part.Transparency = 0.5
				part.Color = Color3.fromRGB(255, 0, 0)
				part.Material = Enum.Material.ForceField
			end
		end
	end

	-- Remove scripts
	for _, scriptObj in pairs(clone:GetDescendants()) do
		if scriptObj:IsA("Script") or scriptObj:IsA("LocalScript") or scriptObj:IsA("ModuleScript") then
			scriptObj:Destroy()
		end
	end

	local hrp = clone:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.CFrame = CFrame.new(position)
	else
		warn("spawnDummy: HumanoidRootPart not found in clone!")
		clone:Destroy()
		return nil
	end

	local humanoid = clone:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	else
		warn("spawnDummy: Humanoid not found in clone!")
		clone:Destroy()
		return nil
	end

	print("spawnDummy: Clone spawned successfully.")
	return clone
end

-- Begin controlling the clone
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	if not char then
		warn("beginControl: Player character not found!")
		active = false
		return
	end

	local hrp = char:WaitForChild("HumanoidRootPart", 5)
	if not hrp then
		warn("beginControl: HumanoidRootPart not found!")
		active = false
		return
	end

	-- Float and anchor real character 3 studs up (visible)
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 3, 0)

	-- Spawn clone below real character
	cloneSpawnPosition = hrp.Position - Vector3.new(0, 4, 0)
	dummy = spawnDummy(cloneSpawnPosition)
	if not dummy then
		warn("beginControl: Failed to spawn dummy!")
		active = false
		return
	end

	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	if not dummyHumanoid then
		warn("beginControl: Dummy humanoid not found!")
		dummy:Destroy()
		active = false
		return
	end

	camera.CameraSubject = dummyHumanoid

	-- Movement handling
	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = camCF.LookVector * Vector3.new(1, 0, 1)
			local right = camCF.RightVector * Vector3.new(1, 0, 1)
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit

			local root = dummy:FindFirstChild("HumanoidRootPart")
			local humanoid = dummy:FindFirstChildOfClass("Humanoid")
			if root and humanoid then
				local dt = RunService.RenderStepped:Wait()
				local proposedPos = root.Position + moveDir * humanoid.WalkSpeed * dt
				if (proposedPos - cloneSpawnPosition).Magnitude <= 200 then
					humanoid:Move(moveDir, false)
					root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
				else
					humanoid:Move(Vector3.zero, false)
				end
			end
		else
			local humanoid = dummy and dummy:FindFirstChildOfClass("Humanoid")
			if humanoid then
				humanoid:Move(Vector3.zero, false)
			end
		end
	end)

	-- Path tracking
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root and (root.Position - lastPos).Magnitude >= 2 then
			createPathPoint(root.Position)
			lastPos = root.Position
		end
	end)
end

-- Smoothly glide your real character through path with acceleration, capped at 8 seconds
local function glideAlongPath(hrp, humanoid, pathPoints)
	if #pathPoints == 0 then return end

	local maxTime = 8
	local startSpeed = 2
	local maxSpeed = 300
	local elapsed = 0

	-- Calculate total distance
	local totalDist = 0
	for i = 2, #pathPoints do
		totalDist += (pathPoints[i].Position - pathPoints[i-1].Position).Magnitude
	end
	if totalDist == 0 then return end

	-- Move along path with TweenService
	for i = 1, #pathPoints do
		local targetPos = pathPoints[i].Position + Vector3.new(0, 1, 0)
		local dist = (hrp.Position - targetPos).Magnitude
		if dist == 0 then continue end

		local speed = math.min(startSpeed + (maxSpeed - startSpeed) * (elapsed / maxTime), maxSpeed)
		local timeForSegment = dist / speed
		if elapsed + timeForSegment > maxTime then
			timeForSegment = maxTime - elapsed
		end

		if timeForSegment > 0 then
			local tweenInfo = TweenInfo.new(timeForSegment, Enum.EasingStyle.Linear)
			local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})
			tween:Play()
			tween.Completed:Wait()
		end

		elapsed = elapsed + timeForSegment

		if elapsed >= maxTime then
			hrp.CFrame = CFrame.new(pathPoints[#pathPoints].Position + Vector3.new(0, 1, 0))
			break
		end
	end
end

-- End control and make your real character walk the path smoothly
local function endControl()
	active = false

	if pathConnection then pathConnection:Disconnect() end
	if moveConnection then moveConnection:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	hrp.Anchored = false
	camera.CameraSubject = humanoid

	glideAlongPath(hrp, humanoid, path)

	for _, p in path do p:Destroy() end
	table.clear(path)
end

-- Toggle clone control with T
UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
