local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil
local flyConnection = nil

local marker = nil -- marker part to show fly destination

-- Create glowing path part (optional visual trail)
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Spawn R6 dummy clone
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)
	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.Transparency = 1
		hrp.CanCollide = false
		hrp.CFrame = CFrame.new(position)
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Enable or disable noclip for a character model
local function setNoclip(character, enabled)
	for _, part in pairs(character:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = not enabled
		end
	end
end

-- Create or update marker at given position
local function placeMarker(position)
	if marker then
		marker.CFrame = CFrame.new(position)
		return
	end

	marker = Instance.new("Part")
	marker.Anchored = true
	marker.CanCollide = false
	marker.Size = Vector3.new(2, 0.5, 2)
	marker.Material = Enum.Material.Neon
	marker.Color = Color3.fromRGB(0, 255, 255)
	marker.CFrame = CFrame.new(position)
	marker.Name = "FlyDestinationMarker"
	marker.Parent = workspace
end

-- Remove marker if exists
local function removeMarker()
	if marker then
		marker:Destroy()
		marker = nil
	end
end

-- Start controlling clone
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")

	-- FLOAT 4 studs upward
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 4, 0)

	dummy = spawnDummy(hrp.Position - Vector3.new(0, 4, 0))
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	camera.CameraSubject = dummyHumanoid

	-- Movement control WITH jump on space press (no float)
	-- Listen for space key presses separately to trigger jump
	local spaceConnection
	spaceConnection = UIS.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if active and dummy and input.KeyCode == Enum.KeyCode.Space then
			local humanoid = dummy:FindFirstChildOfClass("Humanoid")
			if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
				humanoid.Jump = true
			end
		end
	end)

	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		local root = dummy:FindFirstChild("HumanoidRootPart")
		if not root then return end

		-- Handle horizontal movement
		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
			local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit
			if dummyHumanoid then
				dummyHumanoid:Move(moveDir, false)
			end
			root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
		else
			if dummyHumanoid then
				dummyHumanoid:Move(Vector3.zero, false)
			end
		end
	end)

	-- Record only last position as destination
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root then
			lastPos = root.Position
		end
	end)

	-- Store spaceConnection to disconnect later
	dummy:SetAttribute("SpaceJumpConnection", spaceConnection)
end

-- Fly avatar smoothly directly to destination with acceleration and noclip
local function flyToDestination(destination)
	local char = player.Character or player.CharacterAdded:Wait()
	local humanoid = char:WaitForChild("Humanoid")
	local hrp = char:WaitForChild("HumanoidRootPart")

	camera.CameraSubject = humanoid
	hrp.Anchored = false
	humanoid.AutoRotate = false

	setNoclip(char, true) -- Enable noclip

	local startPos = hrp.Position
	local direction = (destination - startPos)
	local totalDist = direction.Magnitude
	if totalDist == 0 then
		setNoclip(char, false)
		humanoid.AutoRotate = true
		return
	end
	direction = direction.Unit

	local maxTime = 1.5
	local elapsed = 0

	local maxSpeed = totalDist / maxTime * 2

	if flyConnection then
		flyConnection:Disconnect()
		flyConnection = nil
	end

	flyConnection = RunService.RenderStepped:Connect(function(dt)
		elapsed += dt
		local t = math.clamp(elapsed / maxTime, 0, 1)

		local speed = maxSpeed * t
		local moveDist = speed * dt

		local currentPos = hrp.Position
		local toDest = destination - currentPos
		local distToDest = toDest.Magnitude

		if distToDest <= moveDist or t >= 1 then
			hrp.CFrame = CFrame.new(destination, destination + direction)
			flyConnection:Disconnect()
			flyConnection = nil
			setNoclip(char, false)
			humanoid.AutoRotate = true
		else
			local moveDir = toDest.Unit
			hrp.CFrame = CFrame.new(currentPos + moveDir * moveDist, currentPos + moveDir * moveDist + direction)
		end
	end)
end

-- End control, cleanup, then place marker, restore camera, fly avatar
local function endControl()
	active = false

	if pathConnection then
		pathConnection:Disconnect()
		pathConnection = nil
	end
	if moveConnection then
		moveConnection:Disconnect()
		moveConnection = nil
	end
	if dummy then
		-- Disconnect space jump connection
		local spaceConn = dummy:GetAttribute("SpaceJumpConnection")
		if spaceConn then
			spaceConn:Disconnect()
		end

		-- Get last position for marker
		local dummyHRP = dummy:FindFirstChild("HumanoidRootPart")
		local lastPos = dummyHRP and dummyHRP.Position or nil

		-- Place marker at clone position before destroying
		if lastPos then
			placeMarker(lastPos)
		end

		dummy:Destroy()
		dummy = nil

		-- Return camera to player character immediately
		local char = player.Character or player.CharacterAdded:Wait()
		local humanoid = char:FindFirstChildOfClass("Humanoid")
		if humanoid then
			camera.CameraSubject = humanoid
		end

		char:WaitForChild("HumanoidRootPart").Anchored = false

		-- Fly avatar to marker position
		if lastPos then
			flyToDestination(lastPos)
		end
	end
end

-- Toggle with T
UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
