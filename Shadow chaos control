local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local active = false
local dummy = nil
local path = {}
local pathConnection = nil
local moveConnection = nil

-- Create glowing path part
local function createPathPoint(position)
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 0.2, 1)
	part.Color = Color3.fromRGB(255, 255, 0)
	part.Material = Enum.Material.Neon
	part.CFrame = CFrame.new(position)
	part.Parent = workspace
	table.insert(path, part)
end

-- Spawn R6 dummy with your appearance, red/transparent, hide HRP
local function spawnDummy(position)
	local desc = Players:GetHumanoidDescriptionFromUserId(player.UserId)
	local model = Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R6)

	model.Name = "ControllableClone"

	for _, part in model:GetDescendants() do
		if part:IsA("BasePart") then
			part.Transparency = 0.5
			part.Color = Color3.fromRGB(255, 0, 0)
			part.Material = Enum.Material.ForceField
		end
	end

	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.Transparency = 1
		hrp.CanCollide = false
		for _, child in hrp:GetChildren() do
			if child:IsA("Decal") or child:IsA("Mesh") or child:IsA("Attachment") then
				child:Destroy()
			end
		end
		hrp.CFrame = CFrame.new(position)
	end

	local humanoid = model:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 50
	end

	model.Parent = workspace
	return model
end

-- Begin controlling the dummy
local function beginControl()
	active = true

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	-- Float and anchor player 3 studs up
	hrp.Anchored = true
	hrp.CFrame += Vector3.new(0, 3, 0)

	-- Spawn dummy and set camera
	dummy = spawnDummy(hrp.Position - Vector3.new(0, 4, 0))
	local dummyHumanoid = dummy:FindFirstChildOfClass("Humanoid")
	camera.CameraSubject = dummyHumanoid

	-- Movement handling
	moveConnection = RunService.RenderStepped:Connect(function()
		if not dummy or not dummy:FindFirstChild("HumanoidRootPart") then return end

		local moveVec = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then moveVec += Vector3.new(0, 0, 1) end -- Fixed inversion here
		if UIS:IsKeyDown(Enum.KeyCode.S) then moveVec += Vector3.new(0, 0, -1) end -- Fixed inversion here
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveVec += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveVec += Vector3.new(1, 0, 0) end

		if moveVec.Magnitude > 0 then
			local camCF = camera.CFrame
			local forward = camCF.LookVector * Vector3.new(1, 0, 1)
			local right = camCF.RightVector * Vector3.new(1, 0, 1)
			local moveDir = (right * moveVec.X + forward * moveVec.Z).Unit
			dummyHumanoid:Move(moveDir, false)

			-- Rotate dummy root toward movement direction
			local root = dummy:FindFirstChild("HumanoidRootPart")
			if root then
				root.CFrame = CFrame.new(root.Position, root.Position + moveDir)
			end
		else
			dummyHumanoid:Move(Vector3.zero, false)
		end
	end)

	-- Path tracking
	local lastPos = dummy.HumanoidRootPart.Position
	pathConnection = RunService.Heartbeat:Connect(function()
		local root = dummy:FindFirstChild("HumanoidRootPart")
		if root and (root.Position - lastPos).Magnitude >= 2 then
			createPathPoint(root.Position)
			lastPos = root.Position
		end
	end)
end

-- End control and walk the path
local function endControl()
	active = false

	if pathConnection then pathConnection:Disconnect() end
	if moveConnection then moveConnection:Disconnect() end
	if dummy then dummy:Destroy() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")

	hrp.Anchored = false
	camera.CameraSubject = humanoid

	-- Make sure path has points
	if #path == 0 then return end

	-- Calculate total path length
	local totalLength = 0
	for i = 2, #path do
		local prev = path[i-1].Position
		local curr = path[i].Position
		totalLength += (curr - prev).Magnitude
	end
	-- If only one point, use distance from player to it
	if totalLength == 0 then
		totalLength = (hrp.Position - path[1].Position).Magnitude
	end
	if totalLength == 0 then return end -- No movement needed

	local totalTime = 5 -- seconds to clear path
	local elapsedTime = 0

	-- Smooth acceleration helper (quadratic ease-in)
	local function easeIn(t)
		return t*t
	end

	-- Walk path with smooth acceleration and facing direction, keeping on ground
	coroutine.wrap(function()
		local currentIndex = 1
		local currentPos = hrp.Position
		local groundY = currentPos.Y -- store ground level

		while currentIndex <= #path do
			local targetPos = path[currentIndex].Position
			-- Keep targetPos on the ground level (approximate)
			targetPos = Vector3.new(targetPos.X, groundY, targetPos.Z)

			local segmentDistance = (targetPos - currentPos).Magnitude
			if segmentDistance == 0 then
				currentIndex += 1
				continue
			end

			-- Calculate desired speed to finish total path in totalTime,
			-- but accelerate smoothly (easeIn) over totalTime
			local dt = RunService.Heartbeat:Wait()
			elapsedTime = math.min(elapsedTime + dt, totalTime)
			local speedFactor = easeIn(elapsedTime / totalTime)
			local desiredSpeed = totalLength / totalTime * speedFactor

			local direction = (targetPos - currentPos).Unit
			-- Move by min of (speed * dt, distance left)
			local moveStep = math.min(desiredSpeed * dt, segmentDistance)
			local newPos = currentPos + direction * moveStep

			-- Face direction
			hrp.CFrame = CFrame.new(newPos, newPos + direction)

			currentPos = newPos

			if (targetPos - currentPos).Magnitude < 0.1 then
				currentIndex += 1
			end
		end

		-- Snap to final position, maintain facing
		local finalPos = path[#path].Position
		finalPos = Vector3.new(finalPos.X, groundY, finalPos.Z)
		hrp.CFrame = CFrame.new(finalPos, finalPos + hrp.CFrame.LookVector)

		-- Cleanup path parts
		for _, p in path do p:Destroy() end
		table.clear(path)
	end)()
end

-- Toggle with T
UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		if not active then
			beginControl()
		else
			endControl()
		end
	end
end)
