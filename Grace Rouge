local ContextActionService = game:GetService("ContextActionService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local slideAnimationId = 132439703713518
local slideAnimTrack
local animator
local holdingSlide = false

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local defaultWalkSpeed = 28
local defaultJumpPower = 50
local maxSpeed = 55
local slideMomentum = Vector3.new(0, 0, 0)

local lastJumpTime = 0
local jumpCooldownTime = 0.5

local walljumpSpeedBuffTime = 0.3
local walljumpSpeedBuffAmount = 12

local Camera = workspace.CurrentCamera
local baseFOV = 70
local maxFOV = 90

local function playSlideAnim()
	if slideAnimTrack and slideAnimTrack.IsPlaying then return end
	local anim = Instance.new("Animation")
	anim.AnimationId = "rbxassetid://" .. slideAnimationId
	slideAnimTrack = animator:LoadAnimation(anim)
	slideAnimTrack.Looped = true
	slideAnimTrack:Play()
end

local function stopSlideAnim()
	if slideAnimTrack then
		slideAnimTrack:Stop()
		slideAnimTrack = nil
	end
end

local function isWallLeftOrRight()
	local rayLength = 1.5
	local ignoreList = {character}
	local leftRay = Ray.new(hrp.Position, -hrp.CFrame.RightVector * rayLength)
	local rightRay = Ray.new(hrp.Position, hrp.CFrame.RightVector * rayLength)

	local leftHit = workspace:FindPartOnRayWithIgnoreList(leftRay, ignoreList)
	local rightHit = workspace:FindPartOnRayWithIgnoreList(rightRay, ignoreList)

	if leftHit and leftHit.CanCollide then
		return true, -hrp.CFrame.RightVector
	elseif rightHit and rightHit.CanCollide then
		return true, hrp.CFrame.RightVector
	else
		return false, nil
	end
end

local function tryWallJump()
	local touchingWall, wallDir = isWallLeftOrRight()
	if not touchingWall then return false end
	if tick() - lastJumpTime < jumpCooldownTime then return false end

	local jumpPower = 50
	local forwardPushPower = 40
	local lookDir = Vector3.new(hrp.CFrame.LookVector.X, 0, hrp.CFrame.LookVector.Z).Unit
	hrp.Velocity = lookDir * forwardPushPower + Vector3.new(0, jumpPower, 0)

	lastJumpTime = tick()

	maxSpeed = math.min(maxSpeed + walljumpSpeedBuffAmount, 55)
	task.delay(walljumpSpeedBuffTime, function()
		maxSpeed = 55
	end)

	return true
end

local function applySlideMovement(dt)
	local inputVec = Vector3.zero
	if UserInputService:IsKeyDown(Enum.KeyCode.W) then inputVec += Vector3.zAxis end
	if UserInputService:IsKeyDown(Enum.KeyCode.S) then inputVec -= Vector3.zAxis end
	if UserInputService:IsKeyDown(Enum.KeyCode.A) then inputVec -= Vector3.xAxis end
	if UserInputService:IsKeyDown(Enum.KeyCode.D) then inputVec += Vector3.xAxis end
	if inputVec.Magnitude > 1 then inputVec = inputVec.Unit end

	local cam = workspace.CurrentCamera
	local camLook = Vector3.new(cam.CFrame.LookVector.X, 0, cam.CFrame.LookVector.Z).Unit
	local camRight = Vector3.new(cam.CFrame.RightVector.X, 0, cam.CFrame.RightVector.Z).Unit
	local desiredDir = (camRight * inputVec.X + camLook * inputVec.Z)
	if desiredDir.Magnitude > 0 then desiredDir = desiredDir.Unit end

	local steerStrength = 10
	local accelerationForce = 30
	local friction = 0.8

	if inputVec.Magnitude > 0 then
		local currentSpeed = slideMomentum.Magnitude
		local currentDir = (currentSpeed > 0) and slideMomentum.Unit or desiredDir
		local newDir = currentDir:Lerp(desiredDir, steerStrength * dt).Unit
		local newSpeed = math.min(currentSpeed + accelerationForce * dt, maxSpeed)
		slideMomentum = newDir * newSpeed
	else
		local speed = slideMomentum.Magnitude
		speed = math.max(speed - friction * dt, 0)
		if speed > 0.5 then
			slideMomentum = slideMomentum.Unit * speed
		else
			slideMomentum = slideMomentum.Unit * 0.5
		end
	end

	-- Slope Boost
	local rayOrigin = hrp.Position + Vector3.new(0, 2, 0)
	local rayDirection = Vector3.new(0, -4, 0)
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist

	local rayResult = workspace:Raycast(rayOrigin, rayDirection, rayParams)
	if rayResult then
		local normal = rayResult.Normal
		local slopeAngle = math.acos(normal:Dot(Vector3.yAxis))
		local maxSlope = math.rad(45)
		if slopeAngle > 0 and slopeAngle < maxSlope then
			local downhill = Vector3.new(normal.X, 0, normal.Z).Unit * -1
			slideMomentum += downhill * 20 * dt
		end
	end

	if slideMomentum.Magnitude > maxSpeed then
		slideMomentum = slideMomentum.Unit * maxSpeed
	end

	local yVel = hrp.Velocity.Y
	hrp.Velocity = Vector3.new(slideMomentum.X, yVel, slideMomentum.Z)

	humanoid.WalkSpeed = 0
	humanoid.JumpPower = 0
end

local function onSlideAction(_, inputState)
	if inputState == Enum.UserInputState.Begin then
		if not holdingSlide then
			holdingSlide = true
			playSlideAnim()
		end
	elseif inputState == Enum.UserInputState.End then
		if holdingSlide then
			holdingSlide = false
			stopSlideAnim()
			slideMomentum = Vector3.zero
			humanoid.WalkSpeed = defaultWalkSpeed
			humanoid.JumpPower = defaultJumpPower
			hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
		end
	end
end

ContextActionService:BindAction("SlideAction", onSlideAction, false, Enum.KeyCode.Z)

RunService.RenderStepped:Connect(function(dt)
	if holdingSlide then
		applySlideMovement(dt)
		local speedRatio = math.clamp(slideMomentum.Magnitude / maxSpeed, 0, 1)
		local targetFOV = baseFOV + (maxFOV - baseFOV) * speedRatio
		Camera.FieldOfView += (targetFOV - Camera.FieldOfView) * 5 * dt
	else
		Camera.FieldOfView += (baseFOV - Camera.FieldOfView) * 5 * dt
	end
end)

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.Space then
		tryWallJump()
	end
end)

local function setupCharacter(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	hrp = character:WaitForChild("HumanoidRootPart")
	animator = humanoid:WaitForChild("Animator")
	holdingSlide = false
	slideMomentum = Vector3.zero
	humanoid.WalkSpeed = defaultWalkSpeed
	humanoid.JumpPower = defaultJumpPower
	stopSlideAnim()
end

if player.Character then setupCharacter(player.Character) end
player.CharacterAdded:Connect(setupCharacter)
