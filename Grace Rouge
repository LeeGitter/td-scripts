local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local slideAnimId = 132439703713518
local animator = humanoid:WaitForChild("Animator")
local slideTrack

local slideMomentum = Vector3.zero
local holdingSlide = false

local defaultSpeed = 28
local maxSpeed = 55

local baseFOV = 70
local maxFOV = 90
local Camera = workspace.CurrentCamera

local lastJumpTime = 0
local walljumpBoostTime = 0.3
local walljumpBoostAmount = 12

local function playSlideAnim()
	if slideTrack and slideTrack.IsPlaying then return end
	local anim = Instance.new("Animation")
	anim.AnimationId = "rbxassetid://" .. slideAnimId
	slideTrack = animator:LoadAnimation(anim)
	slideTrack.Looped = true
	slideTrack:Play()
end

local function stopSlideAnim()
	if slideTrack then
		slideTrack:Stop()
		slideTrack = nil
	end
end

local function isWallLeftOrRight()
	local rayLength = 1.5
	local ignore = {character}
	local left = Ray.new(hrp.Position, -hrp.CFrame.RightVector * rayLength)
	local right = Ray.new(hrp.Position, hrp.CFrame.RightVector * rayLength)

	local hitL = workspace:FindPartOnRayWithIgnoreList(left, ignore)
	local hitR = workspace:FindPartOnRayWithIgnoreList(right, ignore)

	if hitL and hitL.CanCollide then return true end
	if hitR and hitR.CanCollide then return true end
	return false
end

local function tryWallJump()
	if tick() - lastJumpTime < 0.5 then return false end
	if not isWallLeftOrRight() then return false end

	local look = Vector3.new(hrp.CFrame.LookVector.X, 0, hrp.CFrame.LookVector.Z).Unit
	hrp.Velocity = look * 40 + Vector3.yAxis * 50
	lastJumpTime = tick()

	maxSpeed = math.min(maxSpeed + walljumpBoostAmount, 55)
	task.delay(walljumpBoostTime, function()
		maxSpeed = 55
	end)

	return true
end

local function applySlideMovement(dt)
	local cam = workspace.CurrentCamera
	local camLook = Vector3.new(cam.CFrame.LookVector.X, 0, cam.CFrame.LookVector.Z).Unit
	local camRight = Vector3.new(cam.CFrame.RightVector.X, 0, cam.CFrame.RightVector.Z).Unit

	-- Steering
	local input = Vector3.zero
	if UserInputService:IsKeyDown(Enum.KeyCode.A) then input -= Vector3.xAxis end
	if UserInputService:IsKeyDown(Enum.KeyCode.D) then input += Vector3.xAxis end
	if input.Magnitude > 1 then input = input.Unit end
	local steerDir = (camRight * input.X)
	if steerDir.Magnitude > 0 and slideMomentum.Magnitude > 0 then
		local newDir = slideMomentum.Unit:Lerp(slideMomentum.Unit + steerDir.Unit, 5 * dt).Unit
		slideMomentum = newDir * slideMomentum.Magnitude
	end

	-- Slope physics
	local rayOrigin = hrp.Position + Vector3.new(0, 1.5, 0)
	local rayDir = Vector3.new(0, -3, 0)
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist
	local result = workspace:Raycast(rayOrigin, rayDir, rayParams)

	if result then
		local normal = result.Normal
		local slopeAngle = math.acos(normal:Dot(Vector3.yAxis))
		if slopeAngle > 0.01 and slopeAngle < math.rad(45) then
			local down = Vector3.new(normal.X, 0, normal.Z).Unit * -1
			slideMomentum += down * 30 * dt
		end
	end

	-- Friction
	slideMomentum *= math.clamp(1 - 0.5 * dt, 0, 1)

	-- Clamp speed
	if slideMomentum.Magnitude > maxSpeed then
		slideMomentum = slideMomentum.Unit * maxSpeed
	end

	-- Apply
	local yVel = hrp.Velocity.Y
	hrp.Velocity = Vector3.new(slideMomentum.X, yVel, slideMomentum.Z)

	humanoid.WalkSpeed = 0
	humanoid.JumpPower = 0
end

local function slideAction(_, state)
	if state == Enum.UserInputState.Begin then
		if not holdingSlide then
			holdingSlide = true
			playSlideAnim()

			local cam = workspace.CurrentCamera
			local forward = Vector3.new(cam.CFrame.LookVector.X, 0, cam.CFrame.LookVector.Z).Unit
			slideMomentum = forward * 15
		end
	elseif state == Enum.UserInputState.End then
		if holdingSlide then
			holdingSlide = false
			stopSlideAnim()
			slideMomentum = Vector3.zero
			humanoid.WalkSpeed = defaultSpeed
			humanoid.JumpPower = 50
			hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
		end
	end
end

ContextActionService:BindAction("SlideControl", slideAction, false, Enum.KeyCode.Z)

RunService.RenderStepped:Connect(function(dt)
	if holdingSlide then
		applySlideMovement(dt)

		local speedRatio = math.clamp(slideMomentum.Magnitude / maxSpeed, 0, 1)
		local targetFOV = baseFOV + (maxFOV - baseFOV) * speedRatio
		Camera.FieldOfView += (targetFOV - Camera.FieldOfView) * 5 * dt
	else
		Camera.FieldOfView += (baseFOV - Camera.FieldOfView) * 5 * dt
	end
end)

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.Space then
		tryWallJump()
	end
end)

local function setupCharacter(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	hrp = character:WaitForChild("HumanoidRootPart")
	animator = humanoid:WaitForChild("Animator")

	holdingSlide = false
	slideMomentum = Vector3.zero
	humanoid.WalkSpeed = defaultSpeed
	humanoid.JumpPower = 50
	stopSlideAnim()
end

if player.Character then setupCharacter(player.Character) end
player.CharacterAdded:Connect(setupCharacter)
