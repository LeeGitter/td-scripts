--// Animation ID
local SPEED_ANIM = "rbxassetid://124788249052396"

--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

--// Setup
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

--// Disable default animation controller
local animate = char:FindFirstChild("Animate")
if animate then
    animate.Disabled = true
end

--// Ensure Animator exists
local animator = humanoid:FindFirstChildOfClass("Animator")
if not animator then
    animator = Instance.new("Animator")
    animator.Name = "Animator"
    animator.Parent = humanoid
end

--// Load animation
local function loadAnim(id, looped, speed, priority)
    local anim = Instance.new("Animation")
    anim.AnimationId = id
    local track = animator:LoadAnimation(anim)
    track.Priority = priority or Enum.AnimationPriority.Action
    track.Looped = looped
    track:AdjustSpeed(speed or 1)
    return track
end

local speedTrack = loadAnim(SPEED_ANIM, true, 1, Enum.AnimationPriority.Action4)

--// Main loop
RunService.RenderStepped:Connect(function()
    local velocity = root.Velocity
    local horizontal = Vector3.new(velocity.X, 0, velocity.Z).Magnitude
    local grounded = humanoid.FloorMaterial ~= Enum.Material.Air
    local fast = humanoid.WalkSpeed > 39
    local moving = horizontal > 1

    local shouldPlay = fast and moving and grounded

    if shouldPlay then
        -- Stop all other animations only when asserting
        for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
            local id = track.Animation and track.Animation.AnimationId
            if id ~= SPEED_ANIM then
                track:Stop()
            end
        end

        if not speedTrack.IsPlaying then
            speedTrack:Play()
        end
    else
        if speedTrack.IsPlaying then
            speedTrack:Stop()
        end
    end
end)
