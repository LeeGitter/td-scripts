local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Constants
local DASH_SPEED = 50           -- studs per second
local DASH_DURATION = 2         -- seconds
local GRAVITY_SCALE = 1/3       -- gravity is 1/3 normal during dash
local STEER_SPEED = 10          -- degrees per second max steering turn rate

-- State
local dashing = false
local dashStartTime = 0
local dashDirection = nil
local inputDirection = Vector3.new(0,0,0)

-- Function to get the input vector (WASD) relative to camera
local function getInputDirection()
    local cam = workspace.CurrentCamera
    local lookVector = cam.CFrame.LookVector
    local rightVector = cam.CFrame.RightVector

    local dir = Vector3.new(0,0,0)
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        dir = dir + Vector3.new(lookVector.X,0,lookVector.Z).Unit
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
        dir = dir - Vector3.new(lookVector.X,0,lookVector.Z).Unit
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
        dir = dir - rightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
        dir = dir + rightVector
    end
    if dir.Magnitude > 0 then
        return dir.Unit
    else
        return nil
    end
end

-- Smoothly steer the dash direction towards input direction
local function steerDirection(currentDir, targetDir, dt)
    if not targetDir then return currentDir end
    local angle = math.acos(math.clamp(currentDir:Dot(targetDir), -1, 1))
    if angle < 0.01 then
        return targetDir
    end

    local maxTurn = math.rad(STEER_SPEED) * dt
    local t = math.min(1, maxTurn / angle)
    local axis = currentDir:Cross(targetDir).Unit
    if axis.Magnitude == 0 then
        -- Vectors are parallel or anti-parallel
        return currentDir
    end
    local c = math.cos(angle * t)
    local s = math.sin(angle * t)
    local rotated = currentDir * c + axis:Cross(currentDir) * s + axis * (axis:Dot(currentDir)) * (1 - c)
    return rotated.Unit
end

-- Custom gravity function to simulate 1/3 gravity during dash
local function applyCustomGravity()
    local gravity = workspace.Gravity
    local velocity = rootPart.Velocity
    -- Apply 2/3 of gravity acceleration upwards to reduce gravity effect to 1/3
    rootPart.Velocity = velocity + Vector3.new(0, gravity * (2/3) * RunService.RenderStepped:Wait(), 0)
end

-- Dash loop
local function dash()
    dashStartTime = tick()
    dashDirection = rootPart.CFrame.LookVector * Vector3.new(1,0,1)
    dashDirection = dashDirection.Unit
    dashing = true

    local lastTime = tick()

    while dashing do
        local now = tick()
        local dt = now - lastTime
        lastTime = now

        local elapsed = now - dashStartTime
        if elapsed >= DASH_DURATION then
            dashing = false
            break
        end

        -- Get input direction for steering
        local inputDir = getInputDirection()
        dashDirection = steerDirection(dashDirection, inputDir or dashDirection, dt)

        -- Calculate new velocity for dash forward at DASH_SPEED
        local targetVelocity = dashDirection * DASH_SPEED

        -- Keep vertical velocity, but override gravity by applying reduced gravity
        local vel = rootPart.Velocity
        local newVel = Vector3.new(targetVelocity.X, vel.Y, targetVelocity.Z)

        rootPart.Velocity = newVel

        -- Apply custom gravity to simulate 1/3 gravity
        applyCustomGravity()

        RunService.RenderStepped:Wait()
    end

    -- Dash ended, no longer modify velocity or gravity
end

-- Check if player is midair (not touching ground)
local function isMidAir()
    return humanoid.FloorMaterial == Enum.Material.Air
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E and not dashing then
        if isMidAir() then
            coroutine.wrap(dash)()
        end
    end
end)
