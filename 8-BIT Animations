local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local activeTracks = {}
local connections = {}
local stopEffect = false

-- Watch for new animations playing
local function trackAnim(anim)
	if not table.find(activeTracks, anim) then
		table.insert(activeTracks, anim)
	end
end

table.insert(connections, humanoid.AnimationPlayed:Connect(trackAnim))

-- Force-inject existing animations (like idle) on load
for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
	trackAnim(track)
end

-- Clean up stopped tracks
table.insert(connections, RunService.Stepped:Connect(function()
	for i = #activeTracks, 1, -1 do
		local track = activeTracks[i]
		if not track.IsPlaying then
			table.remove(activeTracks, i)
		end
	end
end))

-- Simulate choppy 8-bit animation (freeze/resume loop)
task.spawn(function()
	while not stopEffect do
		-- Freeze animations
		for _, track in ipairs(activeTracks) do
			pcall(function()
				track:AdjustSpeed(0)
			end)
		end
		task.wait(0.15)

		-- Briefly play
		for _, track in ipairs(activeTracks) do
			pcall(function()
				track:AdjustSpeed(1)
			end)
		end
		task.wait(0.05)
	end
end)

-- Auto-disable on respawn
table.insert(connections, player.CharacterAdded:Connect(function()
	stopEffect = true
	for _, conn in ipairs(connections) do
		pcall(function()
			conn:Disconnect()
		end)
	end
end))
