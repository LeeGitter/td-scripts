local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local stopEffect = false
local dummy = nil
local animationController = nil

-- Helper: hides real limbs to only show the dummy
local function hideRealCharacter()
	for _, part in pairs(character:GetDescendants()) do
		if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
			part.Transparency = 1
		elseif part:IsA("Decal") then
			part.Transparency = 1
		elseif part:IsA("Accessory") then
			part:Destroy()
		end
	end
	humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
end

-- Helper: copy your current appearance to a dummy model
local function createDummy()
	local newDummy = Instance.new("Model")
	newDummy.Name = "PixelDummy"
	newDummy.Parent = workspace

	local root = Instance.new("Part")
	root.Name = "HumanoidRootPart"
	root.Size = Vector3.new(2, 2, 1)
	root.Anchored = true
	root.CanCollide = false
	root.Position = hrp.Position
	root.Parent = newDummy

	local animControl = Instance.new("AnimationController")
	animControl.Name = "AnimationController"
	animControl.Parent = newDummy

	-- You can preload animations here if needed
	return newDummy, animControl
end

-- Constantly update dummy every few frames
task.spawn(function()
	dummy, animationController = createDummy()
	hideRealCharacter()

	local currentAnim = nil
	local activeTrack = nil
	local lastAnimId = nil

	while not stopEffect do
		-- Snap dummy to real character
		if dummy and hrp then
			dummy:FindFirstChild("HumanoidRootPart").CFrame = hrp.CFrame
		end

		-- Sync animation
		local playingTracks = humanoid:GetPlayingAnimationTracks()
		for _, track in ipairs(playingTracks) do
			if track.IsPlaying then
				if lastAnimId ~= track.Animation.AnimationId then
					lastAnimId = track.Animation.AnimationId
					if activeTrack then activeTrack:Stop() end

					-- Play new track
					local anim = Instance.new("Animation")
					anim.AnimationId = lastAnimId
					activeTrack = animationController:LoadAnimation(anim)
					activeTrack:Play()
				end
				break
			end
		end

		task.wait(0.2) -- Controls how choppy the movement looks (lower = smoother)
	end
end)

-- Clean up on respawn
player.CharacterAdded:Connect(function()
	stopEffect = true
	if dummy then
		dummy:Destroy()
	end
end)
