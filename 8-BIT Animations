local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local frameHoldTime = 0.15
local maxFrames = 7  -- max frames for long animations
local minFrames = 3  -- min frames for short animations

local animationStates = {}

local function getFramesForLength(length)
    -- Decide how many frames based on length (more frames for longer animations)
    local numFrames = math.clamp(math.floor(length), minFrames, maxFrames)
    local frames = {}

    for i = 0, numFrames - 1 do
        frames[#frames + 1] = i / (numFrames - 1)  -- normalized 0 to 1 positions evenly spaced
    end

    return frames
end

local function cleanStoppedTracks()
    for track, _ in pairs(animationStates) do
        if not track.IsPlaying or not track.Parent then
            if track then
                pcall(function()
                    track:AdjustSpeed(1)
                end)
            end
            animationStates[track] = nil
        end
    end
end

local function addNewTracks()
    local playingTracks = humanoid:GetPlayingAnimationTracks()
    for _, track in ipairs(playingTracks) do
        if not animationStates[track] then
            animationStates[track] = {
                frameIndex = 1,
                timer = 0,
                frames = getFramesForLength(track.Length)
            }
        end
    end
end

RunService.RenderStepped:Connect(function(dt)
    cleanStoppedTracks()
    addNewTracks()

    for track, state in pairs(animationStates) do
        state.timer = state.timer + dt
        if state.timer >= frameHoldTime then
            state.timer = 0
            state.frameIndex = state.frameIndex + 1
            if state.frameIndex > #state.frames then
                state.frameIndex = 1
            end
        end

        local length = track.Length
        local framePos = state.frames[state.frameIndex]
        local clampedPos = math.clamp(framePos * length, 0, length - 0.01)

        pcall(function()
            track.TimePosition = clampedPos
            track:AdjustSpeed(0)
        end)
    end
end)
