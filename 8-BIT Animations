local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

local FRAME_SEGMENTS = 3
local FRAME_HOLD_TIME = 0.12

local choppyState = {}

local function getFrameTimes(length)
	local times = {}
	if length == 0 then
		return {0}
	end
	for i = 0, FRAME_SEGMENTS - 1 do
		table.insert(times, (length / (FRAME_SEGMENTS - 1)) * i)
	end
	return times
end

local function getAnimator()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")
	return humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
end

RunService.RenderStepped:Connect(function(dt)
	local animator = getAnimator()
	if not animator then return end

	for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
		if not choppyState[track] then
			local frames = getFrameTimes(track.Length)
			choppyState[track] = {
				frames = frames,
				index = 1,
				timer = 0,
			}
		end
	end

	for track, state in pairs(choppyState) do
		if not track.IsPlaying then
			choppyState[track] = nil
		else
			state.timer += dt
			if state.timer >= FRAME_HOLD_TIME then
				state.timer = 0
				state.index = (state.index % #state.frames) + 1
				-- Snap to the next "frame" manually
				track.TimePosition = state.frames[state.index]
			end
		end
	end
end)

player.CharacterAdded:Connect(function()
	choppyState = {}
end)
