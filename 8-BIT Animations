local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera

local keysPressed = {W=false, A=false, S=false, D=false}
local mouseDeltaX, mouseDeltaY = 0, 0
local sensitivity = 0.15

local camYaw, camPitch
local humanoid
local hrp

local wsToggle = false
local wsTimer = 0
local wsInterval = 0.05

local FRAME_INTERVAL = 0.3
local animTimer = 0
local animFrameIndex = 1

local function snapAngle(angle)
    local deg = math.deg(angle)
    local snappedDeg = math.floor((deg + 22.5) / 45) * 45
    return math.rad(snappedDeg)
end

local function getYawPitch(cf)
    local lv = cf.LookVector
    return math.atan2(lv.Z, lv.X), math.asin(lv.Y)
end

local function getFrames(track)
    local len = track.Length
    return {0, len/2, len}
end

local function resetCamera()
    camera.CameraType = Enum.CameraType.Custom
    camera.CameraSubject = humanoid or player.Character and player.Character:FindFirstChildOfClass("Humanoid") or nil
    -- Reset camera CFrame if needed (optional)
end

local function onCharacterAdded(char)
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
    humanoid.AutoRotate = false

    -- Initialize camYaw and camPitch from current camera CFrame
    camYaw, camPitch = getYawPitch(camera.CFrame)

    -- Reset input state
    keysPressed = {W=false,A=false,S=false,D=false}
    mouseDeltaX, mouseDeltaY = 0, 0
    wsToggle = false
    wsTimer = 0
    animTimer = 0
    animFrameIndex = 1
end

-- Listen for character respawn
player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize for current character if exists
if player.Character then
    onCharacterAdded(player.Character)
end

-- Input listeners
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    local k = input.KeyCode
    if k == Enum.KeyCode.W then keysPressed.W = true end
    if k == Enum.KeyCode.A then keysPressed.A = true end
    if k == Enum.KeyCode.S then keysPressed.S = true end
    if k == Enum.KeyCode.D then keysPressed.D = true end
end)
UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    local k = input.KeyCode
    if k == Enum.KeyCode.W then keysPressed.W = false end
    if k == Enum.KeyCode.A then keysPressed.A = false end
    if k == Enum.KeyCode.S then keysPressed.S = false end
    if k == Enum.KeyCode.D then keysPressed.D = false end
end)
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        mouseDeltaX = mouseDeltaX + input.Delta.X * sensitivity
        mouseDeltaY = mouseDeltaY + input.Delta.Y * sensitivity
    end
end)

-- Main loop
RunService.RenderStepped:Connect(function(dt)
    if not humanoid or not hrp or not humanoid.Parent then
        -- Character might not be ready yet
        return
    end

    -- Camera & Movement Control

    -- Update camera yaw/pitch from mouse
    camYaw = camYaw + math.rad(mouseDeltaX)
    camPitch = camPitch - math.rad(mouseDeltaY)
    mouseDeltaX = 0
    mouseDeltaY = 0

    local maxPitch = math.rad(80)
    if camPitch > maxPitch then camPitch = maxPitch end
    if camPitch < -maxPitch then camPitch = -maxPitch end

    local targetYaw = snapAngle(camYaw)

    local lerpSpeed = 8
    local function lerp(a,b,t) return a + (b - a)*t end

    local diff = targetYaw - camYaw
    if diff > math.pi then diff = diff - 2*math.pi end
    if diff < -math.pi then diff = diff + 2*math.pi end

    camYaw = camYaw + diff * math.clamp(lerpSpeed * dt, 0, 1)

    local lookVec = Vector3.new(math.cos(camYaw), 0, math.sin(camYaw))
    local rightVec = Vector3.new(-lookVec.Z, 0, lookVec.X)

    local lookVector = (CFrame.fromAxisAngle(rightVec, camPitch) * CFrame.lookAt(Vector3.new(), lookVec)).LookVector
    camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + lookVector)

    local moveVec = Vector3.new(0, 0, 0)
    if keysPressed.W then moveVec += lookVec end
    if keysPressed.S then moveVec -= lookVec end
    if keysPressed.A then moveVec -= rightVec end
    if keysPressed.D then moveVec += rightVec end

    if moveVec.Magnitude > 0.01 then
        moveVec = moveVec.Unit
    else
        return
    end

    if keysPressed.W and keysPressed.S and not keysPressed.A and not keysPressed.D then
        wsTimer = wsTimer + dt
        if wsTimer >= wsInterval then
            wsTimer = 0
            wsToggle = not wsToggle
        end
        moveVec = wsToggle and lookVec or -lookVec
    else
        wsTimer = 0
        wsToggle = false
    end

    local moveYaw = math.atan2(moveVec.Z, moveVec.X)
    local snappedMoveYaw = snapAngle(moveYaw)
    local snappedMoveDir = Vector3.new(math.cos(snappedMoveYaw), 0, math.sin(snappedMoveYaw))

    local pos = hrp.Position
    hrp.CFrame = CFrame.new(pos, pos + snappedMoveDir)

    -- Animation choppy 3-frame effect
    animTimer = animTimer + dt
    if animTimer >= FRAME_INTERVAL then
        animTimer = 0
        animFrameIndex = (animFrameIndex % 3) + 1

        local tracks = humanoid:GetPlayingAnimationTracks()
        for _, track in ipairs(tracks) do
            if track.IsPlaying and track.Length > 0 then
                local frames = getFrames(track)
                track.TimePosition = frames[animFrameIndex]
                track:AdjustSpeed(0)
            end
        end
    end
end)

-- Reset camera on respawn (optional, in case camera persists)
player.CharacterRemoving:Connect(function()
    resetCamera()
end)
