local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local minFrames = 2
local maxFrames = 7
local minFrameHoldTime = 0.05

local animationStates = {}
local lastPlayingTrack = nil

local function setupFrames(length)
	local frameCount = math.clamp(math.floor(length), minFrames, maxFrames)
	local frameTime = math.max(minFrameHoldTime, length / frameCount)
	local frames = {}
	for i = 0, frameCount - 1 do
		frames[#frames + 1] = i / (frameCount - 1)
	end
	return frames, frameTime
end

local function cleanUp()
	for track, _ in pairs(animationStates) do
		if not track.IsPlaying or not track.Parent then
			pcall(function()
				track:AdjustSpeed(1)
				track:AdjustWeight(0)
			end)
			animationStates[track] = nil
		end
	end
end

RunService.RenderStepped:Connect(function(dt)
	cleanUp()

	local playingTracks = humanoid:GetPlayingAnimationTracks()
	local activeTrack = nil

	-- Detect newest playing track (highest ID = most recent)
	if #playingTracks > 0 then
		table.sort(playingTracks, function(a, b)
			return tostring(a):lower() > tostring(b):lower()
		end)
		activeTrack = playingTracks[1]
	end

	for _, track in ipairs(playingTracks) do
		if not animationStates[track] then
			local frames, holdTime = setupFrames(track.Length)
			animationStates[track] = {
				frameIndex = 1,
				timer = 0,
				frames = frames,
				frameHoldTime = holdTime,
				justStarted = true
			}
		end
	end

	for track, state in pairs(animationStates) do
		local isActive = (track == activeTrack)

		if isActive then
			state.timer = state.timer + dt
			if state.timer >= state.frameHoldTime then
				state.timer = 0
				state.frameIndex += 1
				if state.frameIndex > #state.frames then
					state.frameIndex = 1
				end
			end
		else
			state.frameIndex = 1
		end

		local frame = state.frames[state.frameIndex]
		local length = track.Length
		local timePos = math.clamp(frame * length, 0, length - 0.001)

		pcall(function()
			track:AdjustSpeed(0)
			track:AdjustWeight(isActive and 1 or 0)
			track.TimePosition = timePos
		end)
	end
end)
