local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local currentTrack = nil
local choppySpeed = 0.005
local frameStep = 0.5

-- Allow looping of these animations while on ground
local loopAnimations = {
	["idle"] = true,
	["walk"] = true,
	["run"] = true
}

local function getAnimationName(track)
	if track.Animation then
		local name = track.Animation.Name:lower()
		if name:find("idle") then return "idle"
		elseif name:find("walk") then return "walk"
		elseif name:find("run") then return "run"
		elseif name:find("jump") then return "jump"
		elseif name:find("fall") then return "fall"
		else return name end
	end
	return "unknown"
end

-- Choppy animation update loop
RunService.RenderStepped:Connect(function(dt)
	if currentTrack then
		-- If animation is playing too long and isn't idle/run/etc., stop it
		if not loopAnimations[getAnimationName(currentTrack)] then
			if currentTrack.TimePosition > 1 then
				currentTrack:Stop()
				currentTrack = nil
			end
		end
	end
end)

-- Choppy frame stepping
while true do
	task.wait(frameStep)

	if currentTrack then
		-- Resume for a moment, then pause again
		currentTrack:AdjustSpeed(1)
		task.wait(choppySpeed)
		currentTrack:AdjustSpeed(0)
	end
end

-- Hook into new animations
humanoid.AnimationPlayed:Connect(function(track)
	local newName = getAnimationName(track)

	if currentTrack then
		if currentTrack ~= track then
			currentTrack:Stop()
		end
	end

	currentTrack = track
	currentTrack:Play()
	currentTrack:AdjustSpeed(0) -- Immediately pause after first frame
end)

-- Stop script on respawn
player.CharacterAdded:Connect(function()
	script:Destroy()
end)
