local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local UPDATE_RATE = 0.15  -- Time between frames
local FRAME_POINTS = {0, 0.5, 1} -- Start, middle, end

local activeTracks = {}

-- Store what frame index the animation is on (0=start, 1=mid, 2=end)
local trackStates = {}

-- Gets or creates a Motor6D pose snapshot
local function snapshotPose(track)
	local keyframeSequence = track.Animation and track.Animation:GetKeyframeSequence()
	if not keyframeSequence then return nil end

	local keyframes = keyframeSequence:GetKeyframes()
	if #keyframes < 2 then return nil end

	-- Determine frame times
	local totalTime = keyframes[#keyframes].Time
	local poses = {}

	for _, point in ipairs(FRAME_POINTS) do
		local time = totalTime * point
		poses[#poses+1] = {Time = time}
	end

	return poses
end

-- Forces track to the frame index pose
local function jumpToFrame(track, frameIndex)
	local length = track.Length
	if length <= 0 then return end

	local clampedIndex = math.clamp(frameIndex, 1, #FRAME_POINTS)
	local time = length * FRAME_POINTS[clampedIndex]
	track:AdjustSpeed(0)
	track:AdjustWeight(1, 0) -- no easing
	pcall(function()
		track:Play(0, 1, 0) -- play with no fade or speed
		track:AdjustTime(time)
	end)
end

-- Main updater
local function updateTracks()
	for i = #activeTracks, 1, -1 do
		local track = activeTracks[i]
		if not track.IsPlaying then
			table.remove(activeTracks, i)
			trackStates[track] = nil
		else
			local currentIndex = (trackStates[track] or 0) + 1
			if currentIndex > 3 then currentIndex = 1 end
			jumpToFrame(track, currentIndex)
			trackStates[track] = currentIndex
		end
	end
end

-- Scan for new animations
local function scanAnimations()
	for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
		if not trackStates[track] then
			table.insert(activeTracks, track)
			trackStates[track] = 1
			jumpToFrame(track, 1)
		end
	end
end

-- Run on loop
task.spawn(function()
	while true do
		scanAnimations()
		updateTracks()
		task.wait(UPDATE_RATE)
	end
end)
