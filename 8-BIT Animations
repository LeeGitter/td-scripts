local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local activeTracks = {}
local stopEffect = false
local connections = {}

-- Constants
local FRAME_RATE = 6 -- Simulate 6 FPS
local FRAME_TIME = 1 / FRAME_RATE
local FRAME_HOLD = 0.12 -- Freeze duration
local FRAME_SKIP = 0.03 -- Advance window

-- Keep animation list updated
local function updateTracks()
	local current = humanoid:GetPlayingAnimationTracks()
	for _, track in ipairs(current) do
		if not table.find(activeTracks, track) and track.IsPlaying then
			table.insert(activeTracks, track)
		end
	end

	-- Clean up dead ones
	for i = #activeTracks, 1, -1 do
		if not activeTracks[i].IsPlaying then
			table.remove(activeTracks, i)
		end
	end
end

-- Store animation frame time manually
local trackTimeMap = {}

-- Start main simulation loop
task.spawn(function()
	while not stopEffect do
		updateTracks()

		-- Cache current animation times
		for _, track in ipairs(activeTracks) do
			pcall(function()
				trackTimeMap[track] = track.TimePosition
				track:AdjustSpeed(0) -- pause
			end)
		end

		-- Freeze character movement (velocity)
		local lastVelocity = hrp.Velocity
		local lastPos = hrp.Position
		local lastCF = hrp.CFrame
		local lastWalk = humanoid.MoveDirection

		-- Apply freeze
		humanoid.AutoRotate = false
		humanoid:Move(Vector3.zero)
		hrp.Velocity = Vector3.zero

		task.wait(FRAME_HOLD)

		-- Briefly unfreeze animations (advance)
		for _, track in ipairs(activeTracks) do
			pcall(function()
				local last = trackTimeMap[track] or 0
				track.TimePosition = last + FRAME_SKIP
				track:AdjustSpeed(0)
			end)
		end

		-- Briefly allow movement again
		humanoid:Move(lastWalk, true)
		hrp.Velocity = lastVelocity
		humanoid.AutoRotate = true
		task.wait(FRAME_SKIP)
	end
end)

-- Stop on respawn
table.insert(connections, player.CharacterAdded:Connect(function()
	stopEffect = true
	for _, conn in ipairs(connections) do
		pcall(function()
			conn:Disconnect()
		end)
	end
end))
