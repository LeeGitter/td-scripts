local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local frameHoldTime = 0.15
local frames = {0, 0.5, 1} -- start, middle, end frames in normalized position

-- Track animation state: track => {frameIndex, timer}
local animationStates = {}

-- Remove stopped tracks from tracking
local function cleanStoppedTracks()
    for track, _ in pairs(animationStates) do
        if not track.IsPlaying or not track.Parent then
            -- Reset speed back to 1 just in case (to avoid freeze if reused)
            if track then
                pcall(function()
                    track:AdjustSpeed(1)
                end)
            end
            animationStates[track] = nil
        end
    end
end

-- Add new playing tracks that are not tracked yet
local function addNewTracks()
    local playingTracks = humanoid:GetPlayingAnimationTracks()
    for _, track in ipairs(playingTracks) do
        if not animationStates[track] then
            animationStates[track] = {
                frameIndex = 1,
                timer = 0
            }
        end
    end
end

RunService.RenderStepped:Connect(function(dt)
    cleanStoppedTracks()
    addNewTracks()

    for track, state in pairs(animationStates) do
        -- Update timer
        state.timer = state.timer + dt
        if state.timer >= frameHoldTime then
            state.timer = 0
            -- Cycle frame index 1->2->3->1 ...
            state.frameIndex = state.frameIndex + 1
            if state.frameIndex > #frames then
                state.frameIndex = 1
            end
        end

        -- Calculate time position in seconds
        local length = track.Length
        local framePos = frames[state.frameIndex]
        local clampedPos = math.clamp(framePos * length, 0, length - 0.01)

        -- Set animation frame and freeze
        -- Use pcall in case track is removed mid-frame
        pcall(function()
            track.TimePosition = clampedPos
            track:AdjustSpeed(0)
        end)
    end
end)
