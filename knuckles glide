local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

-- Animation
local glideAnim = Instance.new("Animation")
glideAnim.AnimationId = "rbxassetid://100787184418636"
local glideTrack = humanoid:LoadAnimation(glideAnim)

-- State
local gliding = false
local lastSpaceTap = 0
local spaceTapCount = 0
local glideStartTime = 0
local flyVel

-- Dash
local dashActive = false
local dashDuration = 0.5
local dashStartTime = 0
local dashVel

-- Constants
local maxSpeed = 65
local accelerationTime = 7
local descentRate = 2.5

-- Start gliding
local function startGlide()
    if gliding then return end
    if humanoid.FloorMaterial ~= Enum.Material.Air then return end

    gliding = true
    glideStartTime = tick()
    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
    glideTrack:Play()

    flyVel = Instance.new("BodyVelocity")
    flyVel.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    flyVel.P = 10000
    flyVel.Velocity = Vector3.zero
    flyVel.Parent = hrp
end

-- Stop gliding
local function stopGlide()
    gliding = false
    if flyVel then flyVel:Destroy() end
    if glideTrack then glideTrack:Stop() end
end

-- Bounce off wall
local function bounceOffWall()
    if not gliding then return end
    glideStartTime = tick()
    if flyVel then
        flyVel.Velocity = (-hrp.CFrame.LookVector * maxSpeed) + Vector3.new(0, 5, 0)
    end
end

-- Dash forward and upward
local function dash()
    if dashActive then return end
    dashActive = true
    dashStartTime = tick()

    dashVel = Instance.new("BodyVelocity")
    dashVel.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    dashVel.P = 10000
    dashVel.Velocity = (hrp.CFrame.LookVector * 25) + Vector3.new(0, 5, 0)
    dashVel.Parent = hrp
end

-- Input detection
UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end

    if input.KeyCode == Enum.KeyCode.Space then
        local now = tick()
        if now - lastSpaceTap <= 1 then
            spaceTapCount += 1
        else
            spaceTapCount = 1
        end
        lastSpaceTap = now

        if spaceTapCount >= 2 then
            startGlide()
        end
    end

    if input.KeyCode == Enum.KeyCode.F then
        dash()
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Space then
        if gliding then stopGlide() end
    end
end)

-- Main loop
RunService.RenderStepped:Connect(function()
    if dashActive then
        if tick() - dashStartTime >= dashDuration then
            dashActive = false
            if dashVel then dashVel:Destroy() end
        end
    end

    if gliding then
        if humanoid.FloorMaterial ~= Enum.Material.Air then
            stopGlide()
            return
        end

        local elapsed = tick() - glideStartTime
        local speed = math.clamp((maxSpeed * (elapsed / accelerationTime)), 0, maxSpeed)

        local moveDir = humanoid.MoveDirection
        local forward = hrp.CFrame.LookVector * speed
        local steer = moveDir.Magnitude > 0 and moveDir.Unit * 20 or Vector3.zero
        local downward = Vector3.new(0, -descentRate, 0)

        if flyVel then
            flyVel.Velocity = forward + steer + downward
        end

        -- Wall bounce detection
        local ray = Ray.new(hrp.Position, hrp.CFrame.LookVector * 2)
        local hit = workspace:FindPartOnRay(ray, char)
        if hit and hit.CanCollide then
            bounceOffWall()
        end
    end
end)
