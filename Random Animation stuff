local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

local function getCharacter()
	return player.Character or player.CharacterAdded:Wait()
end

local function startMonitoring(humanoid)
	local animator = humanoid:FindFirstChildOfClass("Animator")
	if not animator then return end

	local lastPlayedTracks = {}

	RunService.RenderStepped:Connect(function()
		local currentTracks = animator:GetPlayingAnimationTracks()
		local newAnimationFound = false

		for _, track in ipairs(currentTracks) do
			if not lastPlayedTracks[track] then
				newAnimationFound = true
				lastPlayedTracks[track] = true

				-- Delay randomization by 5 seconds after a new animation starts
				task.delay(5, function()
					if humanoid and humanoid.Parent then
						-- Random WalkSpeed
						humanoid.WalkSpeed = math.random(16, 45)

						-- Random animation speed applied to all current tracks
						local allTracks = animator:GetPlayingAnimationTracks()
						local randomSpeed = math.random() * 2.5 + 0.5 -- 0.5x to 3x
						for _, animTrack in ipairs(allTracks) do
							animTrack:AdjustSpeed(randomSpeed)
						end
					end
				end)
			end
		end

		-- Clean up finished tracks
		for track in pairs(lastPlayedTracks) do
			if not table.find(currentTracks, track) then
				lastPlayedTracks[track] = nil
			end
		end
	end)
end

local function init()
	local char = getCharacter()
	local humanoid = char:WaitForChild("Humanoid")
	startMonitoring(humanoid)
end

init()

-- Handle respawn
player.CharacterAdded:Connect(function()
	task.wait(1)
	init()
end)
