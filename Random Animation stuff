local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

local function getCharacter()
	return player.Character or player.CharacterAdded:Wait()
end

local function startMonitoring(humanoid)
	local animator = humanoid:FindFirstChildOfClass("Animator")
	if not animator then return end

	local lastPlayedTracks = {}
	local connection

	connection = RunService.RenderStepped:Connect(function()
		if not player.Character or player.Character ~= humanoid.Parent then
			-- Character was removed or replaced, stop monitoring
			connection:Disconnect()
			return
		end

		local currentTracks = animator:GetPlayingAnimationTracks()
		for _, track in ipairs(currentTracks) do
			if not lastPlayedTracks[track] then
				lastPlayedTracks[track] = true

				task.delay(5, function()
					if humanoid and humanoid.Parent == player.Character then
						-- Randomize WalkSpeed between 20 and 30
						humanoid.WalkSpeed = math.random(20, 30)

						-- Apply random speed to all current animations
						local allTracks = animator:GetPlayingAnimationTracks()
						local randomSpeed = math.random() * 2.5 + 0.5 -- 0.5x to 3x
						for _, animTrack in ipairs(allTracks) do
							animTrack:AdjustSpeed(randomSpeed)
						end
					end
				end)
			end
		end

		-- Cleanup finished tracks
		for track in pairs(lastPlayedTracks) do
			if not table.find(currentTracks, track) then
				lastPlayedTracks[track] = nil
			end
		end
	end)
end

local char = getCharacter()
local humanoid = char:WaitForChild("Humanoid")
startMonitoring(humanoid)

-- Does NOT restart after respawn
