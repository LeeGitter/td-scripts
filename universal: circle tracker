local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

local NUM_PARTS = 10
local RADIUS = 1.5  -- smaller radius for crown size
local MAX_HEIGHT = 5
local BASE_HEIGHT = 0.5
local SENSITIVITY = 0.015 -- less sensitive scaling

local FLOAT_HEIGHT = 2 -- studs above head

local parts = {}

-- Create parts once
for i = 1, NUM_PARTS do
    local part = Instance.new("Part")
    part.Name = "VisualizerCrownPart"..i
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.Neon
    part.Color = Color3.fromRGB(255, 0, 255) -- start magenta
    part.Size = Vector3.new(0.2, BASE_HEIGHT, 0.2) -- smaller parts for crown
    part.Parent = Workspace
    parts[i] = part
end

local lastHeadPos = nil

RunService.RenderStepped:Connect(function(dt)
    local character = player.Character
    if not character then return end

    local head = character:FindFirstChild("Head")
    if not head then return end

    local currentHeadPos = head.Position

    -- Calculate head movement vector
    local headMovement = Vector3.new(0,0,0)
    if lastHeadPos then
        headMovement = currentHeadPos - lastHeadPos
    end
    lastHeadPos = currentHeadPos

    local crownCenter = currentHeadPos + Vector3.new(0, FLOAT_HEIGHT, 0)

    -- Position parts in a circle around crownCenter
    for i, part in ipairs(parts) do
        local angle = (2 * math.pi / NUM_PARTS) * i
        local offset = Vector3.new(math.cos(angle), 0, math.sin(angle)) * RADIUS

        -- Apply opposite head movement scaled down for parallax effect
        local parallaxOffset = -headMovement * 3

        local partPos = crownCenter + offset + parallaxOffset

        -- Calculate height based on nearby sounds specific to this part
        local maxLoudness = 0
        for _, sound in ipairs(Workspace:GetDescendants()) do
            if sound:IsA("Sound") and sound.Playing and sound.Parent and sound.Parent:IsA("BasePart") then
                local dist = (sound.Parent.Position - partPos).Magnitude
                if dist <= 15 then
                    local loud = sound.PlaybackLoudness or 0
                    if loud > maxLoudness then
                        maxLoudness = loud
                    end
                end
            end
        end

        -- Calculate height scaled and clamped
        local targetHeight = BASE_HEIGHT + maxLoudness * SENSITIVITY
        targetHeight = math.clamp(targetHeight, BASE_HEIGHT, MAX_HEIGHT)

        local currentY = part.Size.Y
        -- Smoothly interpolate size change
        local newY = currentY + (targetHeight - currentY) * 0.1

        -- Update part size and position
        part.Size = Vector3.new(part.Size.X, newY, part.Size.Z)
        -- Position Y so base of part is always FLOAT_HEIGHT above head, never sinking
        part.Position = Vector3.new(partPos.X, crownCenter.Y - (BASE_HEIGHT/2) + (newY - BASE_HEIGHT)/2, partPos.Z)

        -- Color: lerp from magenta to rainbow as it grows
        local t = (newY - BASE_HEIGHT) / (MAX_HEIGHT - BASE_HEIGHT)
        local randomColor = Color3.fromHSV(((i * 0.1) + tick()) % 1, 1, 1)
        part.Color = Color3.new(
            1 * (1 - t) + randomColor.R * t,
            0 * (1 - t) + randomColor.G * t,
            1 * (1 - t) + randomColor.B * t
        )
    end
end)
