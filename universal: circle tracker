local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local head = character:WaitForChild("Head")

local segmentCount = 10
local radius = 2
local heightOffset = 3
local basePartSize = Vector3.new(0.3, 0.5, 0.3)
local soundDetectionRadius = 60
local maxLoudnessExpected = 1000
local maxPartHeight = 5

-- Clear existing crown folder if any
local crownFolder = workspace:FindFirstChild("VisualizerCrown")
if crownFolder then
    crownFolder:Destroy()
end
crownFolder = Instance.new("Folder")
crownFolder.Name = "VisualizerCrown"
crownFolder.Parent = workspace

local parts = {}
local partScales = {}

for i = 1, segmentCount do
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Size = basePartSize
    part.Material = Enum.Material.Neon
    part.Color = Color3.fromHSV(i / segmentCount, 1, 1)
    part.Transparency = 0
    part.Name = "CrownPart"..i
    part.Parent = crownFolder
    parts[i] = part
    partScales[i] = basePartSize.Y
end

-- Variables for smooth tilt and wobble
local prevTiltX, prevTiltZ = 0, 0
local tiltSmoothing = 0.1
local tiltIntensity = 0.1

-- Wobble parameters
local wobbleDuration = 0.5
local wobbleTime = 0
local wobbleAmplitudePos = 0.2
local wobbleAmplitudeRot = 0.09
local wobbleActive = false

local lastPitch, lastRoll = 0, 0
local wobbleTriggerThreshold = 0.05

-- Highlight (Roblox Highlight instance)
local highlight = Instance.new("Highlight")
highlight.Adornee = character
highlight.Parent = character
highlight.DepthMode = Enum.HighlightDepthMode.Occluded -- So you can see it through walls
highlight.FillTransparency = 1 -- start fully invisible fill
highlight.OutlineTransparency = 1 -- start fully invisible outline

local rainbowCycleDuration = 0.05 -- VERY fast cycle through colors

local function getSoundPosition(sound)
    if sound.Parent:IsA("BasePart") then
        return sound.Parent.Position
    elseif sound.Parent:IsA("Model") then
        if sound.Parent:FindFirstChild("HumanoidRootPart") then
            return sound.Parent.HumanoidRootPart.Position
        end
        for _, descendant in pairs(sound.Parent:GetDescendants()) do
            if descendant:IsA("BasePart") then
                return descendant.Position
            end
        end
    end
    return head.Position
end

local function getNearbySounds()
    local sounds = {}

    for _, sound in pairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") and sound.IsPlaying then
            local pos = getSoundPosition(sound)
            if pos and (pos - head.Position).Magnitude <= soundDetectionRadius then
                table.insert(sounds, sound)
            end
        end
    end

    local function addLocalSounds(root)
        for _, sound in pairs(root:GetDescendants()) do
            if sound:IsA("Sound") and sound.IsPlaying then
                table.insert(sounds, sound)
            end
        end
    end

    addLocalSounds(player:WaitForChild("PlayerGui"))
    addLocalSounds(character)

    return sounds
end

RunService.Heartbeat:Connect(function(dt)
    local headCFrame = head.CFrame
    local pitch, roll = headCFrame:ToEulerAnglesXYZ()

    -- Detect significant head tilt change to trigger wobble
    if math.abs(pitch - lastPitch) > wobbleTriggerThreshold or math.abs(roll - lastRoll) > wobbleTriggerThreshold then
        wobbleActive = true
        wobbleTime = 0
    end
    lastPitch = pitch
    lastRoll = roll

    -- Smooth tilt targets (invert to tilt opposite direction)
    local targetTiltX = -pitch * tiltIntensity
    local targetTiltZ = -roll * tiltIntensity
    prevTiltX = prevTiltX + (targetTiltX - prevTiltX) * tiltSmoothing
    prevTiltZ = prevTiltZ + (targetTiltZ - prevTiltZ) * tiltSmoothing

    -- Wobble progress [0 to 1]
    if wobbleActive then
        wobbleTime = wobbleTime + dt
        if wobbleTime > wobbleDuration then
            wobbleActive = false
            wobbleTime = wobbleDuration
        end
    end

    local wobbleProgress = wobbleTime / wobbleDuration

    local wobblePosOffset = 0
    local wobbleRotOffset = 0
    if wobbleActive then
        local decay = 1 - wobbleProgress
        wobblePosOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudePos * decay
        wobbleRotOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudeRot * decay
    end

    local tiltRotation = CFrame.Angles(prevTiltX, 0, prevTiltZ + wobbleRotOffset)
    local baseCFrame = headCFrame * CFrame.new(wobblePosOffset, heightOffset, 0) * tiltRotation

    local sounds = getNearbySounds()

    -- Find the loudest sound's loudness this frame (0 to maxLoudnessExpected)
    local maxLoudness = 0
    for _, sound in ipairs(sounds) do
        local loudness = sound.PlaybackLoudness or 0
        if loudness > maxLoudness then
            maxLoudness = loudness
        end
    end

    for i, part in ipairs(parts) do
        local angle = (2 * math.pi / segmentCount) * i
        local localOffset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
        local worldPos = baseCFrame:PointToWorldSpace(localOffset)

        local normalized = math.clamp(maxLoudness / maxLoudnessExpected, 0, 1)
        local targetHeight = 0.5 + normalized * (maxPartHeight - 0.5)

        partScales[i] = partScales[i] + (targetHeight - partScales[i]) * 0.15
        part.Size = Vector3.new(basePartSize.X, partScales[i], basePartSize.Z)

        part.Position = worldPos + Vector3.new(0, partScales[i] / 2, 0)

        local yawAngle = math.deg(math.atan2(localOffset.Z, localOffset.X))
        part.Orientation = Vector3.new(0, yawAngle, 0)
    end

    -- Update highlight color cycling (fast rainbow)
    local hue = (tick() % rainbowCycleDuration) / rainbowCycleDuration
    highlight.FillColor = Color3.fromHSV(hue, 1, 1)
    highlight.OutlineColor = highlight.FillColor

    -- Adjust visibility based on loudness:
    -- At zero loudness: fully transparent (1)
    -- At half loudness: barely visible (about 0.9 transparency)
    -- At max loudness: bright (about 0.2 transparency)
    local normalized = math.clamp(maxLoudness / maxLoudnessExpected, 0, 1)

    local transparencyAtZero = 1
    local transparencyAtHalf = 0.9
    local transparencyAtMax = 0.2

    local transparency

    if normalized < 0.5 then
        -- interpolate between transparencyAtZero and transparencyAtHalf
        transparency = transparencyAtZero - (normalized / 0.5) * (transparencyAtZero - transparencyAtHalf)
    else
        -- interpolate between transparencyAtHalf and transparencyAtMax
        transparency = transparencyAtHalf - ((normalized - 0.5) / 0.5) * (transparencyAtHalf - transparencyAtMax)
    end

    highlight.FillTransparency = transparency
    highlight.OutlineTransparency = transparency
end)
