local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local camera = Workspace.CurrentCamera

-- Config for SIGNIFICANTLY less sensitive FOV and vignette bopping
local BASE_FOV = 70
local MAX_FOV_INCREASE = 3          -- very subtle zoom
local BOP_SPEED = 4                 -- slower bopping speed
local VIGNETTE_BOP_SPEED = 5        -- slower vignette pulse speed
local VIGNETTE_INTENSITY_MAX = 0.1  -- very subtle vignette
local LOUDNESS_THRESHOLD = 1200     -- very high threshold

-- Setup vignette effect
local vignette = Instance.new("VignetteEffect")
vignette.Parent = camera
vignette.Enabled = true
vignette.Intensity = 0

-- Setup color correction for rainbow tint
local colorCorrection = Instance.new("ColorCorrectionEffect")
colorCorrection.Parent = camera
colorCorrection.Enabled = true
colorCorrection.TintColor = Color3.new(1, 1, 1)

local timeSinceLoud = 0
local active = false

RunService.RenderStepped:Connect(function(dt)
    local maxLoudness = 0
    for _, sound in ipairs(Workspace:GetDescendants()) do
        if sound:IsA("Sound") and sound.Playing and sound.Parent and sound.Parent:IsA("BasePart") then
            local pos = sound.Parent.Position
            local dist = (pos - hrp.Position).Magnitude
            local loudness = sound.PlaybackLoudness or 0
            if dist <= 50 then -- within 50 studs
                maxLoudness = math.max(maxLoudness, loudness)
            end
        end
    end

    if maxLoudness > LOUDNESS_THRESHOLD then
        active = true
        timeSinceLoud = 0
    else
        timeSinceLoud = timeSinceLoud + dt
        if timeSinceLoud > 0.5 then
            active = false
            vignette.Intensity = 0
            colorCorrection.TintColor = Color3.new(1, 1, 1)
            camera.FieldOfView = BASE_FOV
            return
        end
    end

    if active then
        timeSinceLoud = timeSinceLoud + dt

        local fovOffset = math.sin(timeSinceLoud * BOP_SPEED) * (MAX_FOV_INCREASE / 2) + (MAX_FOV_INCREASE / 2)
        camera.FieldOfView = BASE_FOV + fovOffset

        local vignettePulse = (math.sin(timeSinceLoud * VIGNETTE_BOP_SPEED) + 1) / 2
        vignette.Intensity = vignettePulse * VIGNETTE_INTENSITY_MAX

        local hue = (tick() * 1.5) % 1
        colorCorrection.TintColor = Color3.fromHSV(hue, 1, 1)
    end
end)
