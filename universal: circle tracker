local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local torso = character:WaitForChild("Torso") -- R6 torso

local segmentCount = 11

-- Cleanup old parts
local crownFolder = workspace:FindFirstChild("VisualizerCrown")
if crownFolder then
    crownFolder:Destroy()
end
crownFolder = Instance.new("Folder")
crownFolder.Name = "VisualizerCrown"
crownFolder.Parent = workspace

local parts = {}
local basePartThickness = 0.25
local basePartLength = 1.5

-- Create parts
for i = 1, segmentCount do
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.Neon
    part.Transparency = 0
    part.Name = "TailPart" .. i
    part.Color = Color3.fromHSV(i / segmentCount, 1, 1)
    part.Parent = crownFolder
    parts[i] = part
end

-- Set sizes for parts
-- Tail segments 1-3 (long thin)
for i = 1, 3 do
    parts[i].Size = Vector3.new(basePartThickness, basePartThickness, basePartLength)
end

-- Hollow square frame parts 4-7
local squareThickness = basePartThickness
local squareLength = basePartLength
parts[4].Size = Vector3.new(squareLength, squareThickness, squareThickness) -- top
parts[5].Size = Vector3.new(squareThickness, squareThickness, squareLength) -- right
parts[6].Size = Vector3.new(squareLength, squareThickness, squareThickness) -- bottom
parts[7].Size = Vector3.new(squareThickness, squareThickness, squareLength) -- left

-- Crossing parts 8-10
for i = 8, 10 do
    parts[i].Size = Vector3.new(squareThickness * 0.5, squareThickness * 0.5, squareLength * 0.9)
    parts[i].Color = Color3.new(1, 0, 0)
end

-- Last part 11
parts[11].Size = Vector3.new(squareThickness * 0.3, squareThickness * 0.3, squareLength * 0.6)
parts[11].Color = Color3.new(0, 1, 0)

local wobbleTime = 0

RunService.Heartbeat:Connect(function(dt)
    wobbleTime = wobbleTime + dt * 5

    -- Calculate the tail base position: torso back waist
    -- Torso size Y is height, Z is depth. Back is +Z/2 relative to torso center.
    local backWaistOffset = Vector3.new(0, -torso.Size.Y/2, torso.Size.Z/2)
    local baseCFrame = torso.CFrame * CFrame.new(backWaistOffset)

    -- Tail segments 1-3 extend backward (negative Z in torso space)
    for i = 1, 3 do
        local offsetZ = -basePartLength * (i - 1)
        local swayX = math.sin(wobbleTime + i) * 0.15
        local swayY = math.cos(wobbleTime * 1.5 + i) * 0.05
        -- Offset in local torso space
        local localOffset = Vector3.new(swayX, swayY - 0.1 * i, offsetZ)
        local worldPos = baseCFrame:PointToWorldSpace(localOffset)

        -- Make the part face backward along torso's back (-Z)
        local rotation = CFrame.Angles(math.rad(swayY * 10), 0, math.rad(swayX * 20))
        parts[i].CFrame = CFrame.new(worldPos) * baseCFrame.Rotation * rotation
    end

    -- Square frame parts (4-7) positioned at tail tip (after part 3)
    local tipLocalPos = Vector3.new(0, -0.1, -basePartLength * 3)
    local tipCFrame = baseCFrame * CFrame.new(tipLocalPos)

    local halfLen = squareLength / 2
    parts[4].CFrame = tipCFrame * CFrame.new(halfLen, 0, 0) -- top side
    parts[5].CFrame = tipCFrame * CFrame.new(0, 0, halfLen) * CFrame.Angles(0, math.rad(90), 0) -- right side
    parts[6].CFrame = tipCFrame * CFrame.new(-halfLen, 0, 0) -- bottom side
    parts[7].CFrame = tipCFrame * CFrame.new(0, 0, -halfLen) * CFrame.Angles(0, math.rad(90), 0) -- left side

    -- Crossing parts 8-10 crossing near the square center
    parts[8].CFrame = tipCFrame * CFrame.Angles(math.rad(45), 0, 0)
    parts[9].CFrame = tipCFrame * CFrame.Angles(math.rad(-45), 0, 0)
    parts[10].CFrame = tipCFrame * CFrame.Angles(0, math.rad(45), 0)

    -- Last part (11) near square center with slight offset and rotation
    parts[11].CFrame = tipCFrame * CFrame.new(0, 0.1, 0) * CFrame.Angles(0, 0, math.rad(30))
end)
