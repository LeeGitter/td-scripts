local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local SoundService = game:GetService("SoundService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local torso = character:WaitForChild("Torso")
local head = character:WaitForChild("Head")

-------------------------------
-- Tail Configuration
-------------------------------
local NUM_SEGMENTS = 16
local BASE_SIZE = Vector3.new(0.5, 0.5, 0.7)
local LENGTH_PER_SEGMENT = 0.7
local BASE_OFFSET = Vector3.new(0, -1.5, 1.5)
local MAX_PITCH_ANGLE = math.rad(30)
local BUILD_DELAY = 0.05

if character:FindFirstChild("DynamicTailModel") then
	character.DynamicTailModel:Destroy()
end

local tailModel = Instance.new("Model")
tailModel.Name = "DynamicTailModel"
tailModel.Parent = character

local tailRootAttachment = Instance.new("Attachment")
tailRootAttachment.Name = "TailRootAttachment"
tailRootAttachment.Position = BASE_OFFSET
tailRootAttachment.Parent = torso

local segments, attachments = {}, {}

local function createSegment(index)
	local part = Instance.new("Part")
	part.Name = "TailSegment_" .. index
	local sizeMultiplier = 1 + (index / NUM_SEGMENTS) * 1.5
	part.Size = Vector3.new(BASE_SIZE.X * sizeMultiplier, BASE_SIZE.Y * sizeMultiplier, LENGTH_PER_SEGMENT)
	part.Material = Enum.Material.Neon
	part.Anchored = false
	part.CanCollide = false
	part.Massless = true
	part.CastShadow = false
	part.Color = Color3.fromHSV((index / NUM_SEGMENTS) % 1, 1, 1)
	part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
	part.Parent = tailModel

	local att0 = Instance.new("Attachment", part)
	att0.Name = "Attachment0"
	att0.Position = Vector3.new(0, 0, -LENGTH_PER_SEGMENT / 2)

	local att1 = Instance.new("Attachment", part)
	att1.Name = "Attachment1"
	att1.Position = Vector3.new(0, 0, LENGTH_PER_SEGMENT / 2)

	return part, att0, att1
end

for i = 1, NUM_SEGMENTS do
	local part, att0, att1 = createSegment(i)
	segments[i] = part
	attachments[i] = {att0, att1}
	local t = (i - 1) / (NUM_SEGMENTS - 1)
	local pitchAngle = MAX_PITCH_ANGLE * t
	local basePos = Vector3.new(0, BASE_OFFSET.Y, -BASE_OFFSET.Z - LENGTH_PER_SEGMENT * (i - 1))
	local cframe = torso.CFrame * CFrame.new(basePos) * CFrame.Angles(pitchAngle, 0, 0)
	part.CFrame = cframe
	part.Anchored = true
	wait(BUILD_DELAY)
end

for i = 1, NUM_SEGMENTS do
	local part = segments[i]
	part.Anchored = false
	local att0, att1 = attachments[i][1], attachments[i][2]
	local attachA = (i == 1) and tailRootAttachment or attachments[i - 1][2]
	local attachB = att0

	local alignPos = Instance.new("AlignPosition")
	alignPos.Attachment0 = attachB
	alignPos.Attachment1 = attachA
	alignPos.MaxForce = 10000
	alignPos.Responsiveness = 50
	alignPos.RigidityEnabled = false
	alignPos.Parent = part

	local alignOri = Instance.new("AlignOrientation")
	alignOri.Attachment0 = attachB
	alignOri.Attachment1 = attachA
	alignOri.MaxTorque = 10000
	alignOri.Responsiveness = 50
	alignOri.Parent = part
end

local wobbleSpeed = 2
local wobbleMagnitude = 0.05

RunService.RenderStepped:Connect(function()
	local velocity = torso.Velocity.Magnitude
	local time = tick()
	for i, part in ipairs(segments) do
		local phase = time * wobbleSpeed + i
		local swayX = math.sin(phase) * wobbleMagnitude * (velocity / 20)
		local swayY = math.cos(phase * 1.5) * wobbleMagnitude * (velocity / 20)
		local att0, att1 = attachments[i][1], attachments[i][2]
		att0.Position = Vector3.new(0, 0, -LENGTH_PER_SEGMENT / 2) + Vector3.new(swayX, swayY, 0)
	end
end)

-------------------------------
-- Crown Configuration
-------------------------------
local segmentCount = 10
local radius = 2
local heightOffset = 3
local basePartSize = Vector3.new(0.3, 0.5, 0.3)
local soundDetectionRadius = 60
local maxLoudnessExpected = 1000
local maxPartHeight = 5

local crownFolder = workspace:FindFirstChild("VisualizerCrown")
if crownFolder then
	crownFolder:Destroy()
end
crownFolder = Instance.new("Folder")
crownFolder.Name = "VisualizerCrown"
crownFolder.Parent = workspace

local parts = {}
local partScales = {}

for i = 1, segmentCount do
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = basePartSize
	part.Material = Enum.Material.Neon
	part.Color = Color3.fromHSV(i / segmentCount, 1, 1)
	part.Transparency = 0
	part.Name = "CrownPart" .. i
	part.Parent = crownFolder
	parts[i] = part
	partScales[i] = basePartSize.Y
end

local prevTiltX, prevTiltZ = 0, 0
local tiltSmoothing = 0.1
local tiltIntensity = 0.1
local wobbleDuration = 0.5
local wobbleTime = 0
local wobbleAmplitudePos = 0.2
local wobbleAmplitudeRot = 0.09
local wobbleActive = false
local lastPitch, lastRoll = 0, 0
local wobbleTriggerThreshold = 0.05

local cachedSounds = {}
local timeSinceLastScan = 0
local scanInterval = 0.1

local function getSoundPosition(sound)
	if sound.Parent:IsA("BasePart") then
		return sound.Parent.Position
	elseif sound.Parent:IsA("Model") then
		local hrp = sound.Parent:FindFirstChild("HumanoidRootPart")
		if hrp then return hrp.Position end
		for _, d in pairs(sound.Parent:GetDescendants()) do
			if d:IsA("BasePart") then return d.Position end
		end
	end
	return head.Position
end

local function getNearbySounds(dt)
	timeSinceLastScan += dt
	if timeSinceLastScan < scanInterval then
		return cachedSounds
	end
	timeSinceLastScan = 0

	local sounds = {}

	for _, sound in pairs(workspace:GetDescendants()) do
		if sound:IsA("Sound") and sound.IsPlaying then
			local pos = getSoundPosition(sound)
			if (pos - head.Position).Magnitude <= soundDetectionRadius then
				local isFloating = not sound.Parent:IsA("BasePart") and not sound.Parent:IsA("Model")
				table.insert(sounds, {
					Instance = sound,
					IsFloating = isFloating
				})
			end
		end
	end

	local function addLocalSounds(root)
		for _, sound in pairs(root:GetDescendants()) do
			if sound:IsA("Sound") and sound.IsPlaying then
				table.insert(sounds, {
					Instance = sound,
					IsFloating = false
				})
			end
		end
	end

	addLocalSounds(player:WaitForChild("PlayerGui"))
	addLocalSounds(character)

	cachedSounds = sounds
	return sounds
end

RunService.Heartbeat:Connect(function(dt)
	local headCFrame = head.CFrame
	local pitch, roll = headCFrame:ToEulerAnglesXYZ()

	if math.abs(pitch - lastPitch) > wobbleTriggerThreshold or math.abs(roll - lastRoll) > wobbleTriggerThreshold then
		wobbleActive = true
		wobbleTime = 0
	end
	lastPitch, lastRoll = pitch, roll

	local targetTiltX = -pitch * tiltIntensity
	local targetTiltZ = -roll * tiltIntensity
	prevTiltX += (targetTiltX - prevTiltX) * tiltSmoothing
	prevTiltZ += (targetTiltZ - prevTiltZ) * tiltSmoothing

	if wobbleActive then
		wobbleTime += dt
		if wobbleTime > wobbleDuration then
			wobbleActive = false
			wobbleTime = wobbleDuration
		end
	end

	local wobbleProgress = wobbleTime / wobbleDuration
	local wobblePosOffset = 0
	local wobbleRotOffset = 0
	if wobbleActive then
		local decay = 1 - wobbleProgress
		wobblePosOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudePos * decay
		wobbleRotOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudeRot * decay
	end

	local tiltRotation = CFrame.Angles(prevTiltX, 0, prevTiltZ + wobbleRotOffset)
	local baseCFrame = headCFrame * CFrame.new(wobblePosOffset, heightOffset, 0) * tiltRotation

	local sounds = getNearbySounds(dt)

	for i, part in ipairs(parts) do
		local angle = (2 * math.pi / segmentCount) * i
		local localOffset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
		local worldPos = baseCFrame:PointToWorldSpace(localOffset)

		local soundData = #sounds > 0 and sounds[((i - 1) % #sounds) + 1] or nil
		local sound = soundData and soundData.Instance or nil

		local loudness = 0
		if sound then
			loudness = sound.PlaybackLoudness or 0
			if soundData.IsFloating then
				loudness *= 2.5
			end
		end

		local normalized = math.clamp(loudness / maxLoudnessExpected, 0, 1)
		local targetHeight = 0.5 + normalized * (maxPartHeight - 0.5)

		partScales[i] += (targetHeight - partScales[i]) * 0.25
		part.Size = Vector3.new(basePartSize.X, partScales[i], basePartSize.Z)
		part.Position = worldPos + Vector3.new(0, partScales[i] / 2, 0)

		local yawAngle = math.deg(math.atan2(localOffset.Z, localOffset.X))
		part.Orientation = Vector3.new(0, yawAngle, 0)
	end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local head = character:WaitForChild("Head")

local segmentCount = 10
local radius = 2
local heightOffset = 3
local basePartSize = Vector3.new(0.3, 0.3, 0.3)

local parts = {}

for i = 1, segmentCount do
	local part = Instance.new("Part")
	part.Size = basePartSize
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.BrickColor = BrickColor.new("Bright yellow")
	part.Parent = workspace
	table.insert(parts, part)
end

RunService.RenderStepped:Connect(function()
	local camCF = workspace.CurrentCamera.CFrame
	local basePos = head.Position + Vector3.new(0, heightOffset, 0)

	for i, part in ipairs(parts) do
		local angle = math.rad((360 / segmentCount) * i)
		local offset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
		offset = camCF:VectorToWorldSpace(offset)
		local targetPos = basePos + offset
		part.Position = targetPos
	end
end)

-------------------------------
-- Afterimage Trail Effect
-------------------------------

local function createAfterimage()
	local clone = character:Clone()
	clone.Name = "Afterimage"

	-- Clean up transparency 1+ parts and make remaining ones anchored and non-functional
	for _, part in clone:GetDescendants() do
		if part:IsA("BasePart") then
			if part.Transparency >= 1 then
				part:Destroy()
			else
				part.Anchored = true
				part.CanCollide = false
				part.Massless = true
			end
		elseif part:IsA("Humanoid") or part:IsA("Animator") then
			part:Destroy()
		end
	end

	-- Parent to workspace
	clone.Parent = workspace

	-- Tween fade out
	local TweenService = game:GetService("TweenService")
	local fadeTime = 0.3

	for _, part in clone:GetDescendants() do
		if part:IsA("BasePart") then
			local goal = {}
			goal.Transparency = 1

			local tween = TweenService:Create(part, TweenInfo.new(fadeTime), goal)
			tween:Play()
		end
	end

	-- Auto-remove after fade
	game.Debris:AddItem(clone, fadeTime)
end

-- Spawn afterimage trail continuously
task.spawn(function()
	while true do
		createAfterimage()
		task.wait(0.05)
	end
end)
