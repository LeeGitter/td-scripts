local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local head = character:WaitForChild("Head")

local crownParts = {}
local lastNearTime = tick()
local crownRadius = 2
local crownHeight = 0.5
local numParts = 12

-- Create visualizer crown
for i = 1, numParts do
	local angle = (2 * math.pi / numParts) * i
	local part = Instance.new("Part")
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(0.3, 0.3, 0.3)
	part.Shape = Enum.PartType.Ball
	part.Material = Enum.Material.Neon
	part.Color = Color3.fromHSV(i / numParts, 1, 1)
	part.Parent = workspace
	crownParts[i] = part
end

-- Get nearby sounds
local function getNearbySounds()
	local sounds = {}
	for _, s in ipairs(workspace:GetDescendants()) do
		if s:IsA("Sound") and s.IsPlaying and (s.Position - hrp.Position).Magnitude < 50 then
			table.insert(sounds, s)
		end
	end
	for _, s in ipairs(SoundService:GetDescendants()) do
		if s:IsA("Sound") and s.IsPlaying then
			table.insert(sounds, s)
		end
	end
	return sounds
end

-- Update loop
RunService.RenderStepped:Connect(function(dt)
	if not hrp or not hrp.Parent then return end

	local sounds = getNearbySounds()
	if #sounds > 0 then
		lastNearTime = tick()
	end

	local now = tick()
	if (hrp.Position - head.Position).Magnitude > 20 and now - lastNearTime > 10 then
		for _, p in ipairs(crownParts) do p:Destroy() end
		crownParts = {}
		script:Destroy()
		return
	end

	local hrpCFrame = hrp.CFrame
	local tiltX = -hrpCFrame.RightVector.Y * 20
	local tiltZ = -hrpCFrame.LookVector.Y * 20

	for i, part in ipairs(crownParts) do
		local angle = (2 * math.pi / numParts) * i
		local x = math.cos(angle) * crownRadius
		local z = math.sin(angle) * crownRadius
		local offset = Vector3.new(x, crownHeight, z)

		-- Apply tilt
		local tiltOffset = CFrame.Angles(math.rad(tiltX), 0, math.rad(tiltZ)):VectorToWorldSpace(offset)
		local worldPos = head.Position + tiltOffset
		part.Position = worldPos

		-- Get some sound data
		local sound = sounds[i % #sounds + 1]
		local volume = sound and sound.PlaybackLoudness or 0
		local scale = 0.3 + math.clamp(volume / 500, 0, 0.5)

		part.Size = part.Size:Lerp(Vector3.new(scale, scale, scale), 0.2)
	end
end)
