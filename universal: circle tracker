local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local leftFoot = character:WaitForChild("LeftFoot")
local rightFoot = character:WaitForChild("RightFoot")
local head = character:WaitForChild("Head")

-- Audio visualizer config
local soundDetectionRadius = 60
local maxLoudnessExpected = 1000
local maxPillarHeight = 5

-- Pillar spawn control
local pillarSpawnInterval = 1 -- seconds
local lastPillarSpawnTime = 0

-- Folder to store pillars
local pillarFolder = workspace:FindFirstChild("FootPillarTrail")
if pillarFolder then pillarFolder:Destroy() end
pillarFolder = Instance.new("Folder")
pillarFolder.Name = "FootPillarTrail"
pillarFolder.Parent = workspace

-- Create ParticleEmitter aura on foot
local function createFootAura(foot)
    local emitter = Instance.new("ParticleEmitter")
    emitter.Texture = "rbxasset://textures/particles/sparkles_main.dds"
    emitter.Rate = 100
    emitter.Lifetime = NumberRange.new(0.3, 0.6)
    emitter.Speed = NumberRange.new(0, 0)
    emitter.Rotation = NumberRange.new(0, 360)
    emitter.RotSpeed = NumberRange.new(-90, 90)
    emitter.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0.5), NumberSequenceKeypoint.new(1, 0)})
    emitter.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0.3), NumberSequenceKeypoint.new(1, 1)})
    emitter.LightEmission = 0.7
    emitter.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromHSV(0, 0.6, 1)),
        ColorSequenceKeypoint.new(0.2, Color3.fromHSV(0.15, 0.6, 1)),
        ColorSequenceKeypoint.new(0.4, Color3.fromHSV(0.3, 0.6, 1)),
        ColorSequenceKeypoint.new(0.6, Color3.fromHSV(0.5, 0.6, 1)),
        ColorSequenceKeypoint.new(0.8, Color3.fromHSV(0.7, 0.6, 1)),
        ColorSequenceKeypoint.new(1, Color3.fromHSV(0.9, 0.6, 1)),
    }
    emitter.Parent = foot
    return emitter
end

local leftAura = createFootAura(leftFoot)
local rightAura = createFootAura(rightFoot)

-- Create Trails on feet
local function createTrail(foot)
    local trail = Instance.new("Trail")
    trail.Attachment0 = Instance.new("Attachment", foot)
    trail.Attachment1 = Instance.new("Attachment", foot)
    trail.Attachment1.Position = Vector3.new(0, 0.1, 0)
    trail.Transparency = NumberSequence.new(0.1)
    trail.Lifetime = 2
    trail.MinLength = 0.2
    trail.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromHSV(0, 0.6, 1)),
        ColorSequenceKeypoint.new(1, Color3.fromHSV(1, 0.6, 1)),
    }
    trail.Parent = foot
    return trail
end

local leftTrail = createTrail(leftFoot)
local rightTrail = createTrail(rightFoot)

-- Function to get recent foot positions (simple cache)
local footPositions = {}

RunService.Heartbeat:Connect(function()
    if not character or not character.Parent then
        character = player.Character or player.CharacterAdded:Wait()
        hrp = character:WaitForChild("HumanoidRootPart")
        leftFoot = character:WaitForChild("LeftFoot")
        rightFoot = character:WaitForChild("RightFoot")
    end

    -- Store recent foot positions for pillar spawning
    table.insert(footPositions, {leftFoot.Position, rightFoot.Position})
    if #footPositions > 60 then -- keep last ~1 second of positions (60 frames)
        table.remove(footPositions, 1)
    end
end)

-- Utility: Get sounds near a position
local function getNearbySounds(position)
    local sounds = {}
    for _, sound in pairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") and sound.IsPlaying then
            local soundPos
            if sound.Parent:IsA("BasePart") then
                soundPos = sound.Parent.Position
            elseif sound.Parent:IsA("Model") and sound.Parent:FindFirstChild("HumanoidRootPart") then
                soundPos = sound.Parent.HumanoidRootPart.Position
            end
            if soundPos and (soundPos - position).Magnitude <= soundDetectionRadius then
                table.insert(sounds, sound)
            end
        end
    end
    return sounds
end

-- Create pillar part with fade out
local function createPillar(position, height, color)
    local pillar = Instance.new("Part")
    pillar.Anchored = true
    pillar.CanCollide = false
    pillar.Size = Vector3.new(0.15, height, 0.15)
    pillar.Position = position + Vector3.new(0, height / 2, 0)
    pillar.Material = Enum.Material.Neon
    pillar.Color = color
    pillar.Transparency = 0
    pillar.Parent = pillarFolder

    spawn(function()
        local lifeTime = 10
        local fadeTime = 4
        local startTime = tick()
        while tick() - startTime < lifeTime do
            local elapsed = tick() - startTime
            if elapsed > lifeTime - fadeTime then
                pillar.Transparency = math.clamp((elapsed - (lifeTime - fadeTime)) / fadeTime, 0, 1)
            end
            RunService.Heartbeat:Wait()
        end
        pillar:Destroy()
    end)
end

RunService.Heartbeat:Connect(function(dt)
    local speed = hrp.Velocity.Magnitude

    if speed > 1 and tick() - lastPillarSpawnTime >= pillarSpawnInterval then
        -- Pick some recent foot positions to spawn pillars on
        for _, posPair in pairs(footPositions) do
            for _, footPos in ipairs(posPair) do
                -- Get nearby sounds and calculate loudness
                local sounds = getNearbySounds(footPos)
                local loudness = 0
                for _, sound in pairs(sounds) do
                    loudness = math.max(loudness, sound.PlaybackLoudness or 0)
                end
                local normalized = math.clamp(loudness / maxLoudnessExpected, 0, 1)
                local pillarHeight = 0.5 + normalized * (maxPillarHeight - 0.5)

                -- Pastel rainbow color cycling by time
                local hue = (tick() * 0.5) % 1
                local color = Color3.fromHSV(hue, 0.6, 1)

                createPillar(footPos, pillarHeight, color)
            end
        end

        lastPillarSpawnTime = tick()
        footPositions = {} -- reset after spawning
    end
end)
