local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local head = character:WaitForChild("Head")

local segmentCount = 10
local radius = 2
local heightOffset = 3
local basePartSize = Vector3.new(0.3, 0.5, 0.3)
local soundDetectionRadius = 60
local maxLoudnessExpected = 1000
local maxPartHeight = 5

-- Clear existing crown folder if any
local crownFolder = workspace:FindFirstChild("VisualizerCrown")
if crownFolder then
    crownFolder:Destroy()
end
crownFolder = Instance.new("Folder")
crownFolder.Name = "VisualizerCrown"
crownFolder.Parent = workspace

local parts = {}
local partScales = {}

for i = 1, segmentCount do
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Size = basePartSize
    part.Material = Enum.Material.Neon
    part.Color = Color3.fromHSV(i / segmentCount, 1, 1)
    part.Transparency = 0
    part.Name = "CrownPart"..i
    part.Parent = crownFolder
    parts[i] = part
    partScales[i] = basePartSize.Y
end

-- Smooth tilt + wobble
local prevTiltX, prevTiltZ = 0, 0
local tiltSmoothing = 0.1
local tiltIntensity = 0.1
local wobbleDuration = 0.5
local wobbleTime = 0
local wobbleAmplitudePos = 0.2
local wobbleAmplitudeRot = 0.09
local wobbleActive = false
local lastPitch, lastRoll = 0, 0
local wobbleTriggerThreshold = 0.05

-- Highlight
local highlight = nil
local highlightTime = 0
local highlightDuration = 1.0
local highlightFullyVisibleTime = 0.2
local rainbowCycleDuration = 0.5

-- Get 3D position of sound
local function getSoundPosition(sound)
    if sound.Parent:IsA("BasePart") then
        return sound.Parent.Position
    elseif sound.Parent:IsA("Model") then
        local hrp = sound.Parent:FindFirstChild("HumanoidRootPart")
        if hrp then return hrp.Position end
        for _, d in pairs(sound.Parent:GetDescendants()) do
            if d:IsA("BasePart") then return d.Position end
        end
    end
    return head.Position
end

-- Cached sounds list and throttle timer
local cachedSounds = {}
local timeSinceLastScan = 0
local scanInterval = 0.1 -- seconds

-- Detect all nearby sounds and flag floating/global ones (throttled)
local function getNearbySounds(dt)
    timeSinceLastScan = timeSinceLastScan + dt
    if timeSinceLastScan < scanInterval then
        return cachedSounds
    end
    timeSinceLastScan = 0

    local sounds = {}

    for _, sound in pairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") and sound.IsPlaying then
            local pos = getSoundPosition(sound)
            if (pos - head.Position).Magnitude <= soundDetectionRadius then
                local isFloating = not sound.Parent:IsA("BasePart") and not sound.Parent:IsA("Model")
                table.insert(sounds, {
                    Instance = sound,
                    IsFloating = isFloating
                })
            end
        end
    end

    local function addLocalSounds(root)
        for _, sound in pairs(root:GetDescendants()) do
            if sound:IsA("Sound") and sound.IsPlaying then
                table.insert(sounds, {
                    Instance = sound,
                    IsFloating = false
                })
            end
        end
    end

    addLocalSounds(player:WaitForChild("PlayerGui"))
    addLocalSounds(character)

    cachedSounds = sounds
    return sounds
end

-- Highlight setup
local function createHighlight()
    if highlight then return end
    highlight = Instance.new("SelectionBox")
    highlight.Adornee = character
    highlight.Parent = character
    highlight.LineThickness = 0.05
    highlight.Transparency = 0
    highlight.Color3 = Color3.new(1,1,1)
    highlight.SurfaceTransparency = 0.8
end

local function removeHighlight()
    if highlight then
        highlight:Destroy()
        highlight = nil
    end
end

RunService.Heartbeat:Connect(function(dt)
    local headCFrame = head.CFrame
    local pitch, roll = headCFrame:ToEulerAnglesXYZ()

    if math.abs(pitch - lastPitch) > wobbleTriggerThreshold or math.abs(roll - lastRoll) > wobbleTriggerThreshold then
        wobbleActive = true
        wobbleTime = 0
    end
    lastPitch, lastRoll = pitch, roll

    local targetTiltX = -pitch * tiltIntensity
    local targetTiltZ = -roll * tiltIntensity
    prevTiltX += (targetTiltX - prevTiltX) * tiltSmoothing
    prevTiltZ += (targetTiltZ - prevTiltZ) * tiltSmoothing

    if wobbleActive then
        wobbleTime += dt
        if wobbleTime > wobbleDuration then
            wobbleActive = false
            wobbleTime = wobbleDuration
        end
    end

    local wobbleProgress = wobbleTime / wobbleDuration
    local wobblePosOffset = 0
    local wobbleRotOffset = 0
    if wobbleActive then
        local decay = 1 - wobbleProgress
        wobblePosOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudePos * decay
        wobbleRotOffset = math.sin(wobbleTime * math.pi * 4) * wobbleAmplitudeRot * decay
    end

    local tiltRotation = CFrame.Angles(prevTiltX, 0, prevTiltZ + wobbleRotOffset)
    local baseCFrame = headCFrame * CFrame.new(wobblePosOffset, heightOffset, 0) * tiltRotation

    local sounds = getNearbySounds(dt)
    local highlightTriggeredThisFrame = false

    for i, part in ipairs(parts) do
        local angle = (2 * math.pi / segmentCount) * i
        local localOffset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
        local worldPos = baseCFrame:PointToWorldSpace(localOffset)

        local soundData = #sounds > 0 and sounds[((i - 1) % #sounds) + 1] or nil
        local sound = soundData and soundData.Instance or nil

        local loudness = 0
        if sound then
            loudness = sound.PlaybackLoudness or 0
            if soundData.IsFloating then
                loudness *= 2.5 -- Increased boost for floating/global sounds
            end
        end

        local normalized = math.clamp(loudness / maxLoudnessExpected, 0, 1)
        local targetHeight = 0.5 + normalized * (maxPartHeight - 0.5)

        partScales[i] += (targetHeight - partScales[i]) * 0.25 -- slightly faster lerp
        part.Size = Vector3.new(basePartSize.X, partScales[i], basePartSize.Z)
        part.Position = worldPos + Vector3.new(0, partScales[i] / 2, 0)

        local yawAngle = math.deg(math.atan2(localOffset.Z, localOffset.X))
        part.Orientation = Vector3.new(0, yawAngle, 0)

        if not highlightTriggeredThisFrame and partScales[i] >= maxPartHeight - 0.1 then
            highlightTriggeredThisFrame = true
        end
    end

    if highlightTriggeredThisFrame then
        highlightTime = 0
        createHighlight()
    end

    if highlight then
        highlightTime += dt
        local hue = (highlightTime % rainbowCycleDuration) / rainbowCycleDuration
        highlight.Color3 = Color3.fromHSV(hue, 1, 1)

        if highlightTime < highlightFullyVisibleTime then
            highlight.Transparency = 0
        elseif highlightTime < highlightDuration then
            local fadeProgress = (highlightTime - highlightFullyVisibleTime) / (highlightDuration - highlightFullyVisibleTime)
            highlight.Transparency = fadeProgress
        else
            removeHighlight()
        end
    end
end)
--=== TAIL ADDON START ===--
local tailParts = {}
local tailLength = 17
local tailFolder = Instance.new("Folder")
tailFolder.Name = "VisualizerTail"
tailFolder.Parent = workspace

local tipOffset = Vector3.new(0, 0, -5)
local lastPositions = {}
local baseTailSize = Vector3.new(0.5, 0.5, 0.5)

-- Create tail segments
for i = 1, tailLength do
	local seg = Instance.new("Part")
	seg.Anchored = true
	seg.CanCollide = false
	seg.Size = baseTailSize * (0.4 + 0.6 * (i / tailLength))
	seg.Material = Enum.Material.Neon
	seg.Color = Color3.fromHSV((i / tailLength), 0.6, 1)
	seg.Transparency = 0
	seg.Shape = Enum.PartType.Block
	seg.Name = "TailSegment_"..i
	seg.Parent = tailFolder
	tailParts[i] = seg
	lastPositions[i] = head.Position
end

-- Create pastel cube at the tip
local pastelCube = Instance.new("Part")
pastelCube.Anchored = true
pastelCube.CanCollide = false
pastelCube.Size = Vector3.new(1, 1, 1)
pastelCube.Material = Enum.Material.Neon
pastelCube.Color = Color3.fromHSV(0, 0.6, 1)
pastelCube.Shape = Enum.PartType.Block
pastelCube.Name = "PastelCube"
pastelCube.Parent = tailFolder

local pastelHue = 0
local tipRotation = 0

RunService.Heartbeat:Connect(function(dt)
	local rootPos = head.Position - Vector3.new(0, 2.5, 0) -- lower tail base
	lastPositions[1] = rootPos

	-- Smooth follow movement
	for i = 2, tailLength do
		local current = lastPositions[i]
		local target = lastPositions[i - 1]
		local direction = (target - current)
		local distance = direction.Magnitude
		local moveDir = direction.Unit * math.min(distance, 0.6 + (i / tailLength) * 0.8)
		lastPositions[i] = current + moveDir
	end

	-- Position segments
	for i, seg in ipairs(tailParts) do
		local pos = lastPositions[i]
		local nextPos = lastPositions[i + 1] or pos
		seg.CFrame = CFrame.new(pos, nextPos)
	end

	-- Update pastel cube (trails 5 studs behind tip)
	local tipPos = lastPositions[tailLength]
	local tipDir = (tipPos - lastPositions[tailLength - 1]).Unit
	local offsetPos = tipPos + tipDir * -5

	tipRotation += dt * 2
	pastelHue = (pastelHue + dt * 0.2) % 1
	pastelCube.Color = Color3.fromHSV(pastelHue, 0.7, 1)
	pastelCube.CFrame = CFrame.new(offsetPos) * CFrame.Angles(0, tipRotation, 0)
end)
--=== TAIL ADDON END ===--
