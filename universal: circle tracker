local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local head = char:WaitForChild("Head")
local hrp = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- SETTINGS
local numCrownParts = 12
local crownRadius = 3
local tailLength = 14
local tailSpacing = 0.6
local rainbowColors = {}
for i = 0, 360, 30 do
	local h = i / 360
	table.insert(rainbowColors, Color3.fromHSV(h, 1, 1))
end

-- CLEANUP
for _, obj in ipairs(char:GetChildren()) do
	if obj.Name == "RainbowCrown" or obj.Name == "RainbowTail" then
		obj:Destroy()
	end
end

-- STORAGE
local crownFolder = Instance.new("Folder", char)
crownFolder.Name = "RainbowCrown"
local crownParts = {}

local tailFolder = Instance.new("Folder", char)
tailFolder.Name = "RainbowTail"
local tailParts = {}

-- CREATE CROWN
for i = 1, numCrownParts do
	local part = Instance.new("Part")
	part.Shape = Enum.PartType.Ball
	part.Size = Vector3.new(0.3, 0.3, 0.3)
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.Color = rainbowColors[(i % #rainbowColors) + 1]
	part.Parent = crownFolder
	table.insert(crownParts, part)
end

-- CREATE TAIL
for i = 1, tailLength do
	local part = Instance.new("Part")
	part.Size = Vector3.new(0.5, 0.5, 0.5)
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.Color = rainbowColors[((i * 3) % #rainbowColors) + 1]
	part.Parent = tailFolder
	table.insert(tailParts, part)
end

-- HELPER: Afterimage
local function createAfterimage()
	local clone = char:Clone()
	for _, d in ipairs(clone:GetDescendants()) do
		if d:IsA("BasePart") then
			d.Anchored = true
			d.CanCollide = false
			d.Transparency = 0.7
			d.Material = Enum.Material.Neon
			d.Color = rainbowColors[math.random(1, #rainbowColors)]
		elseif d:IsA("Humanoid") then
			d:Destroy()
		end
	end
	clone.Parent = workspace
	game:GetService("Debris"):AddItem(clone, 0.3)
end

-- AUDIO DETECTION
local loudness = 0
local isBuff = false
local lastSoundScan = tick()

-- DYNAMIC AUDIO VISUALIZER LOOP
RunService.RenderStepped:Connect(function(dt)
	local now = tick()

	-- === 1. AUDIO REACTIVITY ===
	if now - lastSoundScan > 0.1 then
		lastSoundScan = now
		local volume = 0

		-- HEAD-BASED SOUNDS (LOCAL)
		for _, sound in ipairs(head:GetDescendants()) do
			if sound:IsA("Sound") and sound.IsPlaying then
				volume += sound.PlaybackLoudness or 0
			end
		end

		-- GLOBAL SOUNDS
		for _, sound in ipairs(SoundService:GetDescendants()) do
			if sound:IsA("Sound") and sound.IsPlaying then
				volume += (sound.PlaybackLoudness or 0) * 0.3
			end
		end

		loudness = volume
		isBuff = loudness > 60
	end

	-- === 2. CROWN UPDATE ===
	for i, part in ipairs(crownParts) do
		local angle = math.rad((360 / #crownParts) * i + (tick() * 80))
		local offset = Vector3.new(math.cos(angle), 1.5, math.sin(angle)) * crownRadius
		part.Position = head.Position + offset
		part.Color = rainbowColors[(i + math.floor(tick() * 10)) % #rainbowColors + 1]
	end

	-- === 3. TAIL UPDATE ===
	local rootCF = hrp.CFrame
	for i, part in ipairs(tailParts) do
		local offset = Vector3.new(0, -0.4, -i * tailSpacing)
		local worldPos = rootCF:PointToWorldSpace(offset)
		part.Position = part.Position:Lerp(worldPos, dt * 10)
		part.Color = rainbowColors[((i + math.floor(tick() * 15)) % #rainbowColors) + 1]
	end

	-- === 4. SPEED BOOST AND AFTERIMAGE ===
	if isBuff then
		humanoid.WalkSpeed = 18
		if math.random() < 0.5 then
			createAfterimage()
		end
	else
		humanoid.WalkSpeed = 16
	end
end)
