-- Place this in StarterPlayerScripts or a LocalScript inside the character

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Tail Setup
local tailParts = {}
local tailLength = 8
for i = 1, tailLength do
	local part = Instance.new("Part")
	part.Size = Vector3.new(1, 1, 1)
	part.Shape = Enum.PartType.Block
	part.Material = Enum.Material.Neon
	part.Color = Color3.fromHSV((i / tailLength), 0.6, 1)
	part.Anchored = false
	part.CanCollide = false
	part.Massless = true
	part.CFrame = hrp.CFrame * CFrame.new(0, 0, -i)
	part.Name = "TailSegment"
	part.Parent = workspace

	local att0 = Instance.new("Attachment", i == 1 and hrp or tailParts[i - 1])
	local att1 = Instance.new("Attachment", part)
	local constraint = Instance.new("SpringConstraint")
	constraint.Attachment0 = att0
	constraint.Attachment1 = att1
	constraint.Damping = 5
	constraint.Stiffness = 100
	constraint.Parent = part

	table.insert(tailParts, part)
end

-- Crown Setup
local crownParts = {}
local crownRadius = 4
local numBlocks = 10

for i = 1, numBlocks do
	local part = Instance.new("Part")
	part.Size = Vector3.new(1.2, 1.2, 1.2)
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.Color = Color3.fromHSV(i / numBlocks, 0.7, 1)
	part.Name = "CrownBlock"
	part.Parent = workspace
	table.insert(crownParts, part)
end

-- Afterimage function
local function createAfterimage()
	local clone = character:Clone()
	for _, descendant in ipairs(clone:GetDescendants()) do
		if descendant:IsA("BasePart") then
			descendant.Anchored = true
			descendant.CanCollide = false
			descendant.Transparency = 0.3
			descendant.Material = Enum.Material.Neon
			descendant.Color = Color3.fromHSV(math.random(), 0.6, 1)
		elseif not descendant:IsA("Model") then
			descendant:Destroy()
		end
	end
	clone.Parent = workspace

	task.spawn(function()
		local fadeTime = 0.4
		local start = tick()
		while tick() - start < fadeTime do
			for _, part in ipairs(clone:GetDescendants()) do
				if part:IsA("BasePart") then
					part.Transparency = 0.3 + ((tick() - start) / fadeTime)
				end
			end
			RunService.RenderStepped:Wait()
		end
		clone:Destroy()
	end)
end

-- State variables
local aboveThresholdTime = 0
local isBoosting = false
local spoofSpeed = nil

-- Height checking
RunService.Heartbeat:Connect(function(dt)
	local baseY = hrp.Position.Y
	local partsAboveThreshold = 0

	for _, part in ipairs(crownParts) do
		part.CFrame = hrp.CFrame * CFrame.new(math.cos(tick() * 2 + _) * crownRadius, 3 + math.sin(tick() * 2 + _) * 0.5, math.sin(tick() * 2 + _) * crownRadius)
		if (part.Position.Y - baseY) >= 0.4 * 6 then -- assuming max height as 6
			partsAboveThreshold += 1
		end
	end

	local isAbove = partsAboveThreshold > 0

	if isAbove then
		aboveThresholdTime += dt
	else
		aboveThresholdTime = 0
	end

	if aboveThresholdTime >= 4 and not isBoosting then
		isBoosting = true

		spoofSpeed = humanoid.WalkSpeed * 1.1
		humanoid.WalkSpeed = spoofSpeed

		local afterimageConnection
		afterimageConnection = RunService.RenderStepped:Connect(function()
			if not isBoosting then
				afterimageConnection:Disconnect()
				return
			end
			createAfterimage()
			task.wait(0.05)
		end)

	elseif aboveThresholdTime < 4 and isBoosting then
		isBoosting = false
		if spoofSpeed then
			humanoid.WalkSpeed = spoofSpeed / 1.1
		end
	end
end)
