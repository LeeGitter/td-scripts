local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local head = char:WaitForChild("Head")
local hrp = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- CONFIG
local NUM_CROWN = 12
local TAIL_SEGMENTS = 14
local CROWN_RADIUS = 3
local CROWN_HEIGHT = 1.5

local rainbowColors = {}
for i = 0, 360, 30 do
	table.insert(rainbowColors, Color3.fromHSV(i / 360, 1, 1))
end

-- CLEANUP
for _, obj in ipairs(workspace:GetChildren()) do
	if obj.Name == player.Name .. "_CrownPart" or obj.Name == player.Name .. "_TailPart" then
		obj:Destroy()
	end
end

-- STORAGE
local crownParts = {}
local tailParts = {}
local lastTailPositions = {}

-- CREATE CROWN BLOCKS (IN WORKSPACE)
for i = 1, NUM_CROWN do
	local part = Instance.new("Part")
	part.Size = Vector3.new(0.3, 1.2, 0.3)
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.Color = rainbowColors[i % #rainbowColors + 1]
	part.Name = player.Name .. "_CrownPart"
	part.Parent = workspace
	table.insert(crownParts, part)
end

-- CREATE TAIL SEGMENTS (IN WORKSPACE)
for i = 1, TAIL_SEGMENTS do
	local part = Instance.new("Part")
	local scale = 0.5 + (i / TAIL_SEGMENTS) * 1.2
	part.Size = Vector3.new(scale, scale, scale)
	part.Anchored = true
	part.CanCollide = false
	part.Material = Enum.Material.Neon
	part.Color = rainbowColors[i % #rainbowColors + 1]
	part.Name = player.Name .. "_TailPart"
	part.Parent = workspace
	table.insert(tailParts, part)
end

-- AFTERIMAGES
local function createAfterimages()
	for i = 1, 5 do
		local ghost = char:Clone()
		ghost:PivotTo(char:GetPivot())
		for _, d in ghost:GetDescendants() do
			if d:IsA("BasePart") then
				d.Anchored = true
				d.CanCollide = false
				d.Material = Enum.Material.Neon
				d.Transparency = 0.75
			elseif d:IsA("Humanoid") then
				d:Destroy()
			end
		end
		ghost.Parent = workspace
		Debris:AddItem(ghost, 0.3 + i * 0.03)
		task.wait(0.03)
	end
end

-- Jump listener
humanoid.StateChanged:Connect(function(_, new)
	if new == Enum.HumanoidStateType.Jumping then
		createAfterimages()
	end
end)

-- Audio sensitivity
local loudness = 0
RunService.Stepped:Connect(function()
	local total = 0
	for _, s in head:GetDescendants() do
		if s:IsA("Sound") and s.IsPlaying then
			total += s.PlaybackLoudness or 0
		end
	end
	for _, s in SoundService:GetDescendants() do
		if s:IsA("Sound") and s.IsPlaying then
			total += (s.PlaybackLoudness or 0) * 0.3
		end
	end
	loudness = total
end)

-- UPDATE LOOP
RunService.RenderStepped:Connect(function(dt)
	local t = tick()

	-- CROWN
	for i, part in ipairs(crownParts) do
		local angle = math.rad((360 / NUM_CROWN) * i + t * 60)
		local up = head.CFrame:VectorToWorldSpace(Vector3.new(0, 1, 0))
		local offset = Vector3.new(math.cos(angle), 0, math.sin(angle)) * CROWN_RADIUS
		local worldPos = head.Position + up * CROWN_HEIGHT + offset
		local scale = 1 + (loudness / 500)
		part.Size = Vector3.new(0.3, 1.2 * scale, 0.3)
		part.CFrame = CFrame.lookAt(worldPos, head.Position) * CFrame.Angles(0, 0, math.sin(t * 2 + i) * 0.2)
	end

	-- TAIL
	local prevPos = hrp.Position
	for i, part in ipairs(tailParts) do
		if lastTailPositions[i] then
			part.Position = part.Position:Lerp(lastTailPositions[i], dt * 15)
		else
			part.Position = prevPos
		end
		lastTailPositions[i] = prevPos
		prevPos = part.Position
	end
end)
