local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(c) character = c end)

local MAX_WALL_JUMPS = 2
local STICK_DURATION = 1
local WALL_TOUCH_WINDOW = 0.5
local WALL_DISTANCE = 3
local PUSH_FORCE = 40
local JUMP_FORCE = Vector3.new(0, 55, 0)

local isSticking = false
local canStick = false
local stickEndTime = 0
local wallJumpCount = 0
local detectionTimeout = 0

-- Animation setup
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://80512938371187"
local animTrack = nil

-- Get parts
local function getParts()
	local char = player.Character
	if not char then return end
	local hum = char:FindFirstChildOfClass("Humanoid")
	local hrp = char:FindFirstChild("HumanoidRootPart")
	return char, hum, hrp
end

-- Detect walls
local function detectWall(hrp)
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist

	local directions = {
		hrp.CFrame.LookVector,
		-hrp.CFrame.LookVector,
		hrp.CFrame.RightVector,
		-hrp.CFrame.RightVector,
	}

	for _, dir in ipairs(directions) do
		local ray = workspace:Raycast(hrp.Position, dir * WALL_DISTANCE, rayParams)
		if ray then return ray.Normal end
	end
	return nil
end

-- Start wall stick
local function startStick()
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end
	isSticking = true
	stickEndTime = tick() + STICK_DURATION
	humanoid.PlatformStand = true
	hrp.AssemblyLinearVelocity = Vector3.zero

	-- Keep freezing position
	local freeze
	freeze = RunService.RenderStepped:Connect(function()
		if not isSticking then freeze:Disconnect() return end
		hrp.AssemblyLinearVelocity = Vector3.zero
	end)
end

-- Jump off wall
UIS.JumpRequest:Connect(function()
	if not isSticking then return end
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end

	isSticking = false
	humanoid.PlatformStand = false

	local normal = detectWall(hrp)
	if normal then
		local dir = (normal + Vector3.new(0, 1, 0)).Unit * PUSH_FORCE + JUMP_FORCE
		hrp.AssemblyLinearVelocity = dir
	else
		hrp.AssemblyLinearVelocity = JUMP_FORCE
	end

	-- Play animation
	if animTrack then animTrack:Stop() end
	animTrack = humanoid:LoadAnimation(anim)
	animTrack:Play()
end)

-- Land = reset wall jump count
local _, humanoid = getParts()
if humanoid then
	humanoid.StateChanged:Connect(function(_, new)
		if new == Enum.HumanoidStateType.Landed then
			wallJumpCount = 0
			canStick = false
		end
	end)
end

-- Watch for wall contact after F
RunService.RenderStepped:Connect(function()
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end

	-- End wall stick after 1s
	if isSticking and tick() > stickEndTime then
		isSticking = false
		humanoid.PlatformStand = false
	end

	-- Try stick if in detection window
	if canStick and wallJumpCount < MAX_WALL_JUMPS then
		local normal = detectWall(hrp)
		if normal then
			canStick = false
			wallJumpCount += 1
			startStick()
		elseif tick() > detectionTimeout then
			canStick = false
		end
	end
end)

-- Press F to trigger 0.5s wall detection mode
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F then
		local _, humanoid = getParts()
		if humanoid and humanoid.FloorMaterial == Enum.Material.Air and wallJumpCount < MAX_WALL_JUMPS then
			canStick = true
			detectionTimeout = tick() + WALL_TOUCH_WINDOW
		end
	end
end)
