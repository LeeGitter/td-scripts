local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(c) character = c end)

local MAX_WALL_JUMPS = 2
local STICK_DURATION = 1
local WALL_TOUCH_WINDOW = 0.5
local DETECTION_RADIUS = 1
local PUSH_FORCE = 40
local JUMP_FORCE = Vector3.new(0, 55, 0)

local isSticking = false
local canStick = false
local wallJumpCount = 0
local stickEndTime = 0
local detectionTimeout = 0

-- Animation
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://80512938371187"
local animTrack

-- Get parts
local function getParts()
	local char = player.Character
	if not char then return end
	local hum = char:FindFirstChildOfClass("Humanoid")
	local hrp = char:FindFirstChild("HumanoidRootPart")
	return char, hum, hrp
end

-- Proximity wall detection (1 stud shell)
local function wallNearby(hrp)
	local regionSize = Vector3.new(4, 5, 2) + Vector3.new(DETECTION_RADIUS, DETECTION_RADIUS, DETECTION_RADIUS) * 2
	local regionCFrame = hrp.CFrame

	local overlapParams = OverlapParams.new()
	overlapParams.FilterDescendantsInstances = {character}
	overlapParams.FilterType = Enum.RaycastFilterType.Blacklist

	local parts = workspace:GetPartBoundsInBox(regionCFrame, regionSize, overlapParams)
	for _, part in ipairs(parts) do
		if part.CanCollide and not part:IsDescendantOf(character) then
			return true
		end
	end
	return false
end

-- Start stick
local function startStick()
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end
	isSticking = true
	stickEndTime = tick() + STICK_DURATION
	humanoid.PlatformStand = true
	hrp.AssemblyLinearVelocity = Vector3.zero

	local freeze
	freeze = RunService.RenderStepped:Connect(function()
		if not isSticking then freeze:Disconnect() return end
		hrp.AssemblyLinearVelocity = Vector3.zero
	end)
end

-- Jump off wall
UIS.JumpRequest:Connect(function()
	if not isSticking then return end
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end

	isSticking = false
	humanoid.PlatformStand = false

	-- Launch outward
	local push = (hrp.CFrame.LookVector * -1 + Vector3.new(0, 1, 0)).Unit
	hrp.AssemblyLinearVelocity = push * PUSH_FORCE + JUMP_FORCE

	if animTrack then animTrack:Stop() end
	animTrack = humanoid:LoadAnimation(anim)
	animTrack:Play()
end)

-- Reset jump count on land
local _, humanoid = getParts()
if humanoid then
	humanoid.StateChanged:Connect(function(_, state)
		if state == Enum.HumanoidStateType.Landed then
			wallJumpCount = 0
			canStick = false
		end
	end)
end

-- Main loop
RunService.RenderStepped:Connect(function()
	local _, humanoid, hrp = getParts()
	if not humanoid or not hrp then return end

	if isSticking and tick() > stickEndTime then
		isSticking = false
		humanoid.PlatformStand = false
	end

	if canStick and wallJumpCount < MAX_WALL_JUMPS then
		if wallNearby(hrp) then
			canStick = false
			wallJumpCount += 1
			startStick()
		elseif tick() > detectionTimeout then
			canStick = false
		end
	end
end)

-- F starts the 0.5s detection window
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F then
		local _, humanoid = getParts()
		if humanoid and humanoid.FloorMaterial == Enum.Material.Air and wallJumpCount < MAX_WALL_JUMPS then
			canStick = true
			detectionTimeout = tick() + WALL_TOUCH_WINDOW
		end
	end
end)
