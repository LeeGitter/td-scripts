local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local function onCharAdded(char)
	character = char
end
player.CharacterAdded:Connect(onCharAdded)

local function getHumanoid()
	return character:WaitForChild("Humanoid")
end

local function getHRP()
	return character:WaitForChild("HumanoidRootPart")
end

-- Wall jump animation
local wallJumpAnim = Instance.new("Animation")
wallJumpAnim.AnimationId = "rbxassetid://80512938371187"

-- CONFIG
local MAX_WALL_JUMPS = 2
local STICK_DURATION = 1
local JUMP_FORCE = Vector3.new(0, 55, 0)
local PUSH_FORCE = 30 -- horizontal

-- STATE
local wallJumpCount = 0
local isSticking = false
local stickEndTime = 0
local animationTrack = nil

-- Reset jumps when landing
getHumanoid().StateChanged:Connect(function(_, newState)
	if newState == Enum.HumanoidStateType.Landed then
		wallJumpCount = 0
	end
end)

-- Check if you're touching a wall
local function detectWall()
	local hrp = getHRP()
	local directions = {
		hrp.CFrame.LookVector,
		-hrp.CFrame.LookVector,
		hrp.CFrame.RightVector,
		-hrp.CFrame.RightVector,
	}
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist

	for _, dir in ipairs(directions) do
		local result = workspace:Raycast(hrp.Position, dir * 3, rayParams)
		if result then
			return result.Normal
		end
	end
	return nil
end

-- STICK TO WALL
local function stickToWall()
	if isSticking or wallJumpCount >= MAX_WALL_JUMPS then return end
	local humanoid = getHumanoid()
	if humanoid.FloorMaterial ~= Enum.Material.Air then return end

	local wallNormal = detectWall()
	if wallNormal then
		isSticking = true
		stickEndTime = tick() + STICK_DURATION
		wallJumpCount += 1

		-- Freeze motion
		humanoid:ChangeState(Enum.HumanoidStateType.Physics)
		local hrp = getHRP()
		hrp.Velocity = Vector3.zero

		-- Maintain frozen position
		local con
		con = RS.RenderStepped:Connect(function()
			if not isSticking then con:Disconnect() return end
			hrp.Velocity = Vector3.zero
			hrp.RotVelocity = Vector3.zero
		end)
	end
end

-- WALL JUMP
UIS.JumpRequest:Connect(function()
	if isSticking then
		local hrp = getHRP()
		local wallNormal = detectWall()
		isSticking = false

		-- Apply jump away force
		if wallNormal then
			local launchDir = (wallNormal + Vector3.new(0, 1, 0)).Unit
			hrp.Velocity = launchDir * PUSH_FORCE + JUMP_FORCE
		else
			hrp.Velocity = Vector3.new(0, 50, 0)
		end

		-- Play animation
		local track = getHumanoid():LoadAnimation(wallJumpAnim)
		track:Play()
	end
end)

-- Stop sticking when time ends
RS.RenderStepped:Connect(function()
	if isSticking and tick() > stickEndTime then
		isSticking = false
		getHumanoid():ChangeState(Enum.HumanoidStateType.Freefall)
	end
end)

-- Press F to stick to wall
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F then
		stickToWall()
	end
end)
