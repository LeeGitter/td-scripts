local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(char) character = char end)

local WALL_DETECT_DURATION = 0.5
local STICK_DURATION = 1
local MAX_WALL_JUMPS = 2
local JUMP_FORCE = Vector3.new(0, 55, 0)
local PUSH_FORCE = 40
local WALL_DISTANCE = 3

local wallJumpCount = 0
local isSticking = false
local wallModeActive = false
local canStickUntil = 0
local stickEndTime = 0

-- Animation setup
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://80512938371187"
local animTrack

-- Get character parts
local function get()
	local char = player.Character
	return char, char:WaitForChild("Humanoid"), char:WaitForChild("HumanoidRootPart")
end

-- Detect wall
local function detectWall(hrp)
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist

	local directions = {
		hrp.CFrame.LookVector,
		-hrp.CFrame.LookVector,
		hrp.CFrame.RightVector,
		-hrp.CFrame.RightVector,
	}

	for _, dir in ipairs(directions) do
		local result = workspace:Raycast(hrp.Position, dir * WALL_DISTANCE, rayParams)
		if result then return result.Normal end
	end
	return nil
end

-- Stick to wall
local function stickToWall()
	local _, humanoid, hrp = get()
	if humanoid.FloorMaterial ~= Enum.Material.Air then return end
	if wallJumpCount >= MAX_WALL_JUMPS then return end
	if isSticking then return end
	if not wallModeActive then return end

	local wallNormal = detectWall(hrp)
	if not wallNormal then return end

	isSticking = true
	stickEndTime = tick() + STICK_DURATION
	wallJumpCount += 1

	humanoid.PlatformStand = true
	hrp.AssemblyLinearVelocity = Vector3.zero

	local freeze
	freeze = RS.RenderStepped:Connect(function()
		if not isSticking then freeze:Disconnect() return end
		hrp.AssemblyLinearVelocity = Vector3.zero
	end)
end

-- Wall jump
UIS.JumpRequest:Connect(function()
	if not isSticking then return end

	local _, humanoid, hrp = get()
	isSticking = false
	humanoid.PlatformStand = false

	local wallNormal = detectWall(hrp)
	if wallNormal then
		local launch = (wallNormal + Vector3.new(0, 1, 0)).Unit * PUSH_FORCE + JUMP_FORCE
		hrp.AssemblyLinearVelocity = launch
	end

	-- Play animation
	if animTrack then animTrack:Stop() end
	animTrack = humanoid:LoadAnimation(anim)
	animTrack:Play()
end)

-- Reset on landing
local _, humanoid = get()
humanoid.StateChanged:Connect(function(_, state)
	if state == Enum.HumanoidStateType.Landed then
		wallJumpCount = 0
		wallModeActive = false
	end
end)

-- Render loop
RS.RenderStepped:Connect(function()
	if wallModeActive and not isSticking and tick() <= canStickUntil then
		stickToWall()
	end

	if isSticking and tick() > stickEndTime then
		local _, humanoid = get()
		isSticking = false
		humanoid.PlatformStand = false
	end
end)

-- Press F once to activate wall mode
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F then
		local _, humanoid = get()
		if humanoid.FloorMaterial == Enum.Material.Air and wallJumpCount < MAX_WALL_JUMPS then
			wallModeActive = true
			canStickUntil = tick() + WALL_DETECT_DURATION
		end
	end
end)
