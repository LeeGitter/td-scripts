local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

local player = Players.LocalPlayer
local dashSpeed = 55
local dashDuration = 3
local animationIdCharge = "rbxassetid://136764958535157" -- Used for both hold & charge
local animationIdDash = "rbxassetid://135934693058362"

local character, humanoid, hrp
local holding = false
local cooldown = false
local dashActive = false
local cooldownGui, cooldownLabel
local inputBeganConn, inputEndedConn
local boundDash = false

-- Cleanly stop the dash
local function stopDash()
	if boundDash then
		RunService:UnbindFromRenderStep("ForceDash")
		boundDash = false
	end
	if humanoid then
		humanoid.WalkSpeed = 25
		humanoid.AutoRotate = true
	end
end

-- Clean up on reset
local function cleanup()
	holding = false
	cooldown = false
	dashActive = false
	stopDash()

	if cooldownGui then
		cooldownGui:Destroy()
		cooldownGui = nil
		cooldownLabel = nil
	end
	if inputBeganConn then inputBeganConn:Disconnect() inputBeganConn = nil end
	if inputEndedConn then inputEndedConn:Disconnect() inputEndedConn = nil end
end

-- Create cooldown UI
local function makeGui()
	cooldownGui = Instance.new("ScreenGui")
	cooldownGui.Name = "DashCooldownGui"
	cooldownGui.ResetOnSpawn = false
	cooldownGui.Parent = player:WaitForChild("PlayerGui")

	cooldownLabel = Instance.new("TextLabel", cooldownGui)
	cooldownLabel.Size = UDim2.new(0, 60, 0, 20)
	cooldownLabel.Position = UDim2.new(1, -70, 0.5, -110)
	cooldownLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	cooldownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	cooldownLabel.Font = Enum.Font.Code
	cooldownLabel.TextSize = 14
	cooldownLabel.Text = "Ready"
end

-- Start cooldown timer
local function startCooldown(time)
	cooldown = true
	local start = tick()
	coroutine.wrap(function()
		while tick() - start < time do
			if cooldownLabel then
				cooldownLabel.Text = string.format("%.1f", time - (tick() - start))
			end
			RunService.Heartbeat:Wait()
		end
		cooldown = false
		if cooldownLabel then
			cooldownLabel.Text = "Ready"
		end
	end)()
end

-- Begin Dash
local function beginDash()
	if dashActive then return end
	dashActive = true
	humanoid.WalkSpeed = dashSpeed
	humanoid.AutoRotate = false

	local dashAnim = Instance.new("Animation")
	dashAnim.AnimationId = animationIdDash
	local track = humanoid:LoadAnimation(dashAnim)
	track:Play()
	track:AdjustSpeed(3)

	local startTime = tick()
	local decayStart = 2.5
	local decayEnd = dashDuration

	local forwardDir = Vector3.new(Camera.CFrame.LookVector.X, 0, Camera.CFrame.LookVector.Z).Unit
	local currentDir = forwardDir

	boundDash = true
	RunService:BindToRenderStep("ForceDash", Enum.RenderPriority.Character.Value + 1, function()
		local elapsed = tick() - startTime
		if elapsed >= dashDuration then
			track:Stop()
			stopDash()
			return
		end

		if elapsed >= decayStart then
			local pct = math.clamp((elapsed - decayStart) / (decayEnd - decayStart), 0, 1)
			local speed = 3 - (2 * pct)
			track:AdjustSpeed(speed)
		else
			track:AdjustSpeed(3)
		end

		-- Forced forward motion with slight A/D steering
		local camCF = Camera.CFrame
		local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
		local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit

		local moveDir = forwardDir -- forced base direction
		if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir -= right * 0.5 end
		if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir += right * 0.5 end

		moveDir = moveDir.Unit
		currentDir = currentDir:Lerp(moveDir, 0.08)
		hrp.CFrame = CFrame.new(hrp.Position + currentDir * (dashSpeed / 60), hrp.Position + currentDir)
	end)
end

-- Connect Input
local function connectControls()
	inputBeganConn = UIS.InputBegan:Connect(function(input, gpe)
		if gpe or input.KeyCode ~= Enum.KeyCode.T or holding or cooldown then return end
		holding = true
		humanoid.WalkSpeed = 0
		humanoid.AutoRotate = false

		if not cooldownGui then makeGui() end

		local anim = Instance.new("Animation")
		anim.AnimationId = animationIdCharge
		local track = humanoid:LoadAnimation(anim)
		track:Play()
		track:AdjustSpeed(1)

		local t0 = tick()
		local reached3x = false

		local conn
		conn = RunService.RenderStepped:Connect(function()
			local elapsed = tick() - t0
			if not holding then
				conn:Disconnect()
				if track then track:Stop() end

				if reached3x then
					startCooldown(25)
					beginDash()
				else
					startCooldown(10)
					humanoid.WalkSpeed = 25
					humanoid.AutoRotate = true
				end
				return
			end

			if elapsed <= 2.5 then
				track:AdjustSpeed(1 + elapsed / 2.5)
			elseif elapsed <= 4 then
				track:AdjustSpeed(1 + (elapsed - 2.5) / 1.5)
			elseif elapsed >= 3.5 then
				track:AdjustSpeed(3)
				if elapsed - 3.5 >= 1 then
					reached3x = true
				end
			end
		end)
	end)

	inputEndedConn = UIS.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.T and holding then
			holding = false
		end
	end)
end

-- On Character Load
local function onCharacter(char)
	cleanup()
	character = char
	humanoid = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
	connectControls()
end

-- Initial
onCharacter(player.Character or player.CharacterAdded:Wait())
player.CharacterAdded:Connect(onCharacter)
